{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1508146036000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1508146036000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1508146036000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1508146036000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1508146036000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1508146036000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1508146036000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1508146036000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1508146036000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1508146036000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1508146036000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1508146036000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1508146036000},{"_id":"themes/next/_config.yml","hash":"4cb05e5acabcd40a59f52813d9af75b8dc75197b","modified":1508146036000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1508146036000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1508146036000},{"_id":"source/_posts/Cobar-Cluster-datasource-switch-design-with-distributed-lock.md","hash":"e4a930dc9ad9a973795a52c75e0a8f92dcc47516","modified":1508146036000},{"_id":"source/_posts/Cobar-Enhance-cobar-driver-with-high-availability.md","hash":"a10f022a033c3287bcfcef758c0a18990dec8fbb","modified":1508146036000},{"_id":"source/_posts/Cobar-FAQ.md","hash":"c89125fa6e208c64d836d1582f973cdaf5fde59a","modified":1508401182000},{"_id":"source/_posts/Cobar-How-sql-executes-in-cobar.md","hash":"65ab30dce7a236b1e560837e35e74e4c00f51308","modified":1508146036000},{"_id":"source/_posts/Cobar-How-to-monitor-cobar.md","hash":"4bc59489ad21ca7b42448bc2fe1b26755e8c1384","modified":1508146036000},{"_id":"source/_posts/Cobar-NIO-client.md","hash":"e724361a2aea9af70ceda90a5d4afacfa9040a60","modified":1508401182000},{"_id":"source/_posts/Cobar-NIO-server.md","hash":"8e16fe3c0615adc4608f426394c651448c0c84c4","modified":1508401182000},{"_id":"source/_posts/Cobar-Reactor-design-pattern.md","hash":"c61162d69fd9fae05a4fb3bf0ea028f0689026b7","modified":1508839363000},{"_id":"source/_posts/Curator-Distributed-lock.md","hash":"b8511b50605abb4ba85829041a4ad987d958f8c1","modified":1508295013000},{"_id":"source/_posts/Linux-Useful-command.md","hash":"f6cba72208d045b0128b143cc6f498b1332ba03f","modified":1508824179000},{"_id":"source/_posts/MySQL-Explain.md","hash":"8222c73362db2d7ea268314f0485b2337b83d32d","modified":1508146036000},{"_id":"source/_posts/Netty-FAQ.md","hash":"04fc776a1a1610214015f70c718328789a0dc988","modified":1508509875000},{"_id":"source/_posts/RocketMQ-Consumer-rebalance.md","hash":"e4b3619e71f7ea214509b3ef315ba1dbcc4ae7f7","modified":1508146036000},{"_id":"source/_posts/RocketMQ-Debug-with-intellij.md","hash":"b9cadc44b342e4645d2d702cc2925d0caad3f330","modified":1508146036000},{"_id":"source/_posts/RocketMQ-Delay-message-delivery.md","hash":"b2910091be3e0f9857afb6e184f7873dd78bd583","modified":1508146036000},{"_id":"source/_posts/RocketMQ-FAQ.md","hash":"ad5d9adc71916006472ceaa3151698fa1e314490","modified":1508293849000},{"_id":"source/_posts/RocketMQ-Index-service.md","hash":"1196dd01584f0c876882687d45c6bb7bbd5411f7","modified":1508146036000},{"_id":"source/_posts/RocketMQ-Master-slave-high-availability.md","hash":"a528a5a68efcf7aa26fa47f985ede482f54fa08f","modified":1508146036000},{"_id":"source/_posts/RocketMQ-Message-flush-stategy.md","hash":"827c2cd595055645119e05c2936b81fbeae9ffbf","modified":1508294960000},{"_id":"source/_posts/RocketMQ-Netty-imp-sync-and-async-invoke.md","hash":"2c5fe3afb630894f98c782d82eebeb3ae1c89a37","modified":1508146036000},{"_id":"source/_posts/RocketMQ-Producer-balance.md","hash":"ac4b25af5067a53e31c2e253b1e3f4fab016e290","modified":1508146036000},{"_id":"source/_posts/RocketMQ-Pull-message-with-long-polling.md","hash":"bf6e4595b81ba742836f31e71f0ea5ef862f246c","modified":1508295329000},{"_id":"source/_posts/black-tech-in-guava.md","hash":"501caacd59f05a6d539f80335d09850b5f5dfefc","modified":1508146036000},{"_id":"source/_posts/recipes-in-curator.md","hash":"65b1012602371f6e76db4b611ff74b50026a5bd5","modified":1508146036000},{"_id":"source/_posts/tcc-transaction.md","hash":"db7a4129442e2bf40778c9b151c91fb9d344b89c","modified":1508146036000},{"_id":"source/_posts/tree-cache-single-thread-event-handler-in-curator.md","hash":"8b3e23dfb61e75106ed43aa07cf9dd1bdbd8060f","modified":1508146036000},{"_id":"source/tags/index.md","hash":"5c890fd947e675abc3ce2371a6ff2ff409362311","modified":1508146036000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1508146036000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1508146036000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1508146036000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1508146036000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1508146036000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1508146036000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1508146036000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1508146036000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1508146036000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1508146036000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1508146036000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1508146036000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1508146036000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1508146036000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1508146036000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1508146036000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1508146036000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1508146036000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1508146036000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1508146036000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1508146036000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1508146036000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1508146036000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1508146036000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1508146036000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1508146036000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1508146037000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1508146037000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1508146037000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508146036000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1508146036000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1508146036000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1508146036000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1508146036000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1508146036000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1508146036000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1508146036000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1508146036000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1508146036000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1508146036000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1508146036000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1508146036000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1508146036000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1508146036000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1508146036000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1508146036000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1508146036000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1508146036000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1508146036000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1508146036000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1508146036000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1508146036000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1508146036000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1508146036000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1508146036000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1508146036000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1508146036000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1508146036000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1508146036000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1508146036000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1508146036000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1508146036000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1508146036000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1508146036000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1508146036000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1508146036000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1508146036000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1508146036000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1508146036000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1508146036000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1508146036000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1508146036000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508146036000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1508146036000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508146036000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1508146036000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1508146036000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1508146036000},{"_id":"source/_posts/Cobar-Reactor-design-pattern/CobarReactorSign.gif","hash":"17ac291d666654f13097a9ab729adf5d329bd37a","modified":1508839203000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508146036000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508146036000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508146036000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508146036000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508146036000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508146036000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508146036000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1508146036000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1508146036000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1508146036000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1508146036000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1508146036000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1508146036000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1508146036000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1508146036000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1508146036000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1508146036000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1508146036000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1508146036000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1508146036000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1508146036000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1508146036000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1508146036000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1508146036000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1508146036000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1508146036000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1508146036000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1508146036000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1508146036000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1508146036000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1508146036000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1508146036000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1508146036000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1508146036000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1508146036000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1508146036000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1508146036000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1508146036000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1508146036000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1508146036000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1508146036000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1508146036000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1508146036000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1508146036000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1508146036000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1508146036000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1508146036000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1508146036000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1508146036000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1508146036000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1508146036000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1508146036000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1508146036000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1508146036000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1508146036000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1508146036000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1508146036000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1508146036000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1508146036000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1508146036000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1508146036000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1508146036000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1508146036000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1508146036000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1508146036000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1508146036000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1508146036000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1508146036000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1508146036000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1508146036000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1508146036000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1508146036000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1508146037000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1508146037000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1508146037000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1508146037000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1508146037000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1508146037000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1508146037000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1508146037000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1508146037000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1508146037000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1508146037000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1508146037000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1508146037000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1508146037000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1508146037000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1508146037000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1508146037000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1508146036000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1508146036000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1508146036000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1508146036000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1508146036000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1508146036000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1508146036000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1508146036000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1508146036000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1508146036000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1508146036000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1508146036000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1508146036000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1508146036000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1508146036000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1508146036000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1508146036000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1508146036000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1508146037000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1508146037000},{"_id":"source/_posts/Cobar-Reactor-design-pattern/CobarReactor.gif","hash":"54cc8b7c835ff2a16e965b4e3d7734726d7f0164","modified":1508839012000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1508146036000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1508146037000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1508146037000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1508146037000},{"_id":"source/_posts/RocketMQ-Netty-imp-sync-and-async-invoke/invokeSync.png","hash":"f5462e215665696a7867fc6d4ca8d0722c4fe72a","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1508146036000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1508146036000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1508146036000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1508146036000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1508146036000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1508146036000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1508146036000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1508146036000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1508146037000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1508146037000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1508146037000},{"_id":"source/_posts/RocketMQ-Netty-imp-sync-and-async-invoke/invokeAsync.png","hash":"65984a036bbd1af9b8b862e80d2f765fc3e19a17","modified":1508146036000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1508146036000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1508146037000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1508146037000}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-10-12T11:33:19.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-10-12 19:33:19\ntype: \"tags\"\n---\n","updated":"2017-10-16T09:27:16.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj95g0hqx0001xjq2yflzvktb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Cobar——用分布式锁增强Cobar在集群环境的数据源切换","date":"2017-10-09T09:31:06.000Z","_content":"","source":"_posts/Cobar-Cluster-datasource-switch-design-with-distributed-lock.md","raw":"---\ntitle: Cobar——用分布式锁增强Cobar在集群环境的数据源切换\ndate: 2017-10-09 17:31:06\ntags: Cobar\n---\n","slug":"Cobar-Cluster-datasource-switch-design-with-distributed-lock","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hqo0000xjq2ydchcwx2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Cobar——扩展Cobar Driver，防止单点故障","date":"2017-10-12T12:07:23.000Z","_content":"","source":"_posts/Cobar-Enhance-cobar-driver-with-high-availability.md","raw":"---\ntitle: Cobar——扩展Cobar Driver，防止单点故障\ndate: 2017-10-12 20:07:23\ntags: Cobar\n---\n","slug":"Cobar-Enhance-cobar-driver-with-high-availability","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hqz0002xjq28weqryui","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Cobar-FAQ","date":"2017-10-18T12:24:04.000Z","_content":"\n1. FrontendConnection默认的NioHandler是FrontendAuthenticator, 当认证信息发来时，FrontendConnection会把handler.handle()任务放入一个线程池中，当前的handler是默认的认证器，如果认证成功了，FrontendAuthenticator会反过来将FrontendConnection的handler替换成FrontendCommandHandler。\n2. Handler是由NioConnection主动触发的，在Handler处理完信息后，需要将处理完后的response回写给NioConnection, NioConnection把数据放入NioProcessor的writeQueue。\n3. Cobar将数据库连接池的大小暴露在配置文件中，但为了性能考虑（我觉得），没有严格将数据库的连接数保持在这个范围内，假设连接池的大小为50，在高并发的SQL执行下，连接数可能会冲击到80-90，此时需要注意MySQL的max_connections这个配置，如果这个值比较小，那Cobar在并发执行SQL时创建连接，而MySQL握手包的内容可能会发生变化，但Cobar不会处理这种异常情况，导致Cobar抛出一下错误：\n![img](https://ws4.sinaimg.cn/large/006tKfTcgy1fkmo3ieklej31kw0hz7il.jpg)","source":"_posts/Cobar-FAQ.md","raw":"---\ntitle: Cobar-FAQ\ndate: 2017-10-18 20:24:04\ntags: Cobar\n---\n\n1. FrontendConnection默认的NioHandler是FrontendAuthenticator, 当认证信息发来时，FrontendConnection会把handler.handle()任务放入一个线程池中，当前的handler是默认的认证器，如果认证成功了，FrontendAuthenticator会反过来将FrontendConnection的handler替换成FrontendCommandHandler。\n2. Handler是由NioConnection主动触发的，在Handler处理完信息后，需要将处理完后的response回写给NioConnection, NioConnection把数据放入NioProcessor的writeQueue。\n3. Cobar将数据库连接池的大小暴露在配置文件中，但为了性能考虑（我觉得），没有严格将数据库的连接数保持在这个范围内，假设连接池的大小为50，在高并发的SQL执行下，连接数可能会冲击到80-90，此时需要注意MySQL的max_connections这个配置，如果这个值比较小，那Cobar在并发执行SQL时创建连接，而MySQL握手包的内容可能会发生变化，但Cobar不会处理这种异常情况，导致Cobar抛出一下错误：\n![img](https://ws4.sinaimg.cn/large/006tKfTcgy1fkmo3ieklej31kw0hz7il.jpg)","slug":"Cobar-FAQ","published":1,"updated":"2017-10-19T08:19:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hr80004xjq2tgv27jq4","content":"<ol>\n<li>FrontendConnection默认的NioHandler是FrontendAuthenticator, 当认证信息发来时，FrontendConnection会把handler.handle()任务放入一个线程池中，当前的handler是默认的认证器，如果认证成功了，FrontendAuthenticator会反过来将FrontendConnection的handler替换成FrontendCommandHandler。</li>\n<li>Handler是由NioConnection主动触发的，在Handler处理完信息后，需要将处理完后的response回写给NioConnection, NioConnection把数据放入NioProcessor的writeQueue。</li>\n<li>Cobar将数据库连接池的大小暴露在配置文件中，但为了性能考虑（我觉得），没有严格将数据库的连接数保持在这个范围内，假设连接池的大小为50，在高并发的SQL执行下，连接数可能会冲击到80-90，此时需要注意MySQL的max_connections这个配置，如果这个值比较小，那Cobar在并发执行SQL时创建连接，而MySQL握手包的内容可能会发生变化，但Cobar不会处理这种异常情况，导致Cobar抛出一下错误：<br><img src=\"https://ws4.sinaimg.cn/large/006tKfTcgy1fkmo3ieklej31kw0hz7il.jpg\" alt=\"img\"></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>FrontendConnection默认的NioHandler是FrontendAuthenticator, 当认证信息发来时，FrontendConnection会把handler.handle()任务放入一个线程池中，当前的handler是默认的认证器，如果认证成功了，FrontendAuthenticator会反过来将FrontendConnection的handler替换成FrontendCommandHandler。</li>\n<li>Handler是由NioConnection主动触发的，在Handler处理完信息后，需要将处理完后的response回写给NioConnection, NioConnection把数据放入NioProcessor的writeQueue。</li>\n<li>Cobar将数据库连接池的大小暴露在配置文件中，但为了性能考虑（我觉得），没有严格将数据库的连接数保持在这个范围内，假设连接池的大小为50，在高并发的SQL执行下，连接数可能会冲击到80-90，此时需要注意MySQL的max_connections这个配置，如果这个值比较小，那Cobar在并发执行SQL时创建连接，而MySQL握手包的内容可能会发生变化，但Cobar不会处理这种异常情况，导致Cobar抛出一下错误：<br><img src=\"https://ws4.sinaimg.cn/large/006tKfTcgy1fkmo3ieklej31kw0hz7il.jpg\" alt=\"img\"></li>\n</ol>\n"},{"title":"Cobar——SQL如何被分库分表以及执行","date":"2017-09-19T08:58:28.000Z","_content":"","source":"_posts/Cobar-How-sql-executes-in-cobar.md","raw":"---\ntitle: Cobar——SQL如何被分库分表以及执行\ndate: 2017-09-19 16:58:28\ntags: Cobar\n---\n","slug":"Cobar-How-sql-executes-in-cobar","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hrc0005xjq290y1cdst","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Cobar——近实时监控Cobar前后端连接与线程池","date":"2017-10-12T12:04:26.000Z","_content":"","source":"_posts/Cobar-How-to-monitor-cobar.md","raw":"---\ntitle: Cobar——近实时监控Cobar前后端连接与线程池\ndate: 2017-10-12 20:04:26\ntags: Cobar\n---\n","slug":"Cobar-How-to-monitor-cobar","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hrf0006xjq2h7mtqzyx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Cobar-NIO-client","date":"2017-10-18T03:13:59.000Z","_content":"\nCobar作为一个数据库分库分表中间件，既是一台NIO Server，又是NIO Client","source":"_posts/Cobar-NIO-client.md","raw":"---\ntitle: Cobar-NIO-client\ndate: 2017-10-18 11:13:59\ntags: Cobar\n---\n\nCobar作为一个数据库分库分表中间件，既是一台NIO Server，又是NIO Client","slug":"Cobar-NIO-client","published":1,"updated":"2017-10-19T08:19:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hrk0009xjq2ep7zw7ar","content":"<p>Cobar作为一个数据库分库分表中间件，既是一台NIO Server，又是NIO Client</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Cobar作为一个数据库分库分表中间件，既是一台NIO Server，又是NIO Client</p>\n"},{"title":"Cobar-NIO-server","date":"2017-10-18T03:13:40.000Z","_content":"\nCobar作为一个数据库分库分表中间件，既是一台NIO Server，又是NIO Client","source":"_posts/Cobar-NIO-server.md","raw":"---\ntitle: Cobar-NIO-server\ndate: 2017-10-18 11:13:40\ntags: Cobar\n---\n\nCobar作为一个数据库分库分表中间件，既是一台NIO Server，又是NIO Client","slug":"Cobar-NIO-server","published":1,"updated":"2017-10-19T08:19:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hro000bxjq2icj4mxwi","content":"<p>Cobar作为一个数据库分库分表中间件，既是一台NIO Server，又是NIO Client</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Cobar作为一个数据库分库分表中间件，既是一台NIO Server，又是NIO Client</p>\n"},{"title":"Cobar-Reactor-design-pattern","date":"2017-10-24T10:00:58.000Z","_content":"\n\n![你想输入的替代文字](Cobar-Reactor-design-pattern/CobarReactorSign.gif)\n\n![你想输入的替代文字](Cobar-Reactor-design-pattern/CobarReactor.gif)","source":"_posts/Cobar-Reactor-design-pattern.md","raw":"---\ntitle: Cobar-Reactor-design-pattern\ndate: 2017-10-24 18:00:58\ntags:\n---\n\n\n![你想输入的替代文字](Cobar-Reactor-design-pattern/CobarReactorSign.gif)\n\n![你想输入的替代文字](Cobar-Reactor-design-pattern/CobarReactor.gif)","slug":"Cobar-Reactor-design-pattern","published":1,"updated":"2017-10-24T10:02:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hrs000exjq2qhlgbm83","content":"<p><img src=\"/2017/10/24/Cobar-Reactor-design-pattern/CobarReactorSign.gif\" alt=\"你想输入的替代文字\"></p>\n<p><img src=\"/2017/10/24/Cobar-Reactor-design-pattern/CobarReactor.gif\" alt=\"你想输入的替代文字\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2017/10/24/Cobar-Reactor-design-pattern/CobarReactorSign.gif\" alt=\"你想输入的替代文字\"></p>\n<p><img src=\"/2017/10/24/Cobar-Reactor-design-pattern/CobarReactor.gif\" alt=\"你想输入的替代文字\"></p>\n"},{"title":"curator——分布式锁的实现之一","date":"2017-09-19T08:58:05.000Z","_content":"\n\n* MySQL实现\n* Redis\n* ZooKeeper\n* RedLock","source":"_posts/Curator-Distributed-lock.md","raw":"---\ntitle: curator——分布式锁的实现之一\ndate: 2017-09-19 16:58:05\ntags: Curator\n---\n\n\n* MySQL实现\n* Redis\n* ZooKeeper\n* RedLock","slug":"Curator-Distributed-lock","published":1,"updated":"2017-10-18T02:50:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hrw000gxjq2mtoxkq5d","content":"<ul>\n<li>MySQL实现</li>\n<li>Redis</li>\n<li>ZooKeeper</li>\n<li>RedLock</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>MySQL实现</li>\n<li>Redis</li>\n<li>ZooKeeper</li>\n<li>RedLock</li>\n</ul>\n"},{"title":"实用Linux命令整理","date":"2017-09-09T09:16:00.000Z","_content":"\n#### 文件内容替换\n\n``` bash\nsudo sed -i 's/aaa/bbb/g' `grep -Rl aaa order_migrate_conf/`\n```\n\n#### 查找目录下的所有文件中是否含有某个字符串,并且只打印出文件名\n\n``` bash\ngrep -Rl 1496628000000 order_migrate_conf/\n```\n\n#### 查看超大文件，vim 慎用\n\n``` bash\nless file.log\n```\n\n\n#### 超大文件从后往前查找关键词kind_pay\n\n``` bash\ntac file_path | grep kind_pay\n```\n\nless file_path, G(go to file end), /kind_pay + enter, N(search key word reversely)\n\n#### 分类查看各种状态的TCP连接\n\n``` bash\nss  -tan|awk 'NR>1{++S[$1]}END{for (a in S) print a,S[a]}'\n```\n\n#### 查看logs目录下所有文件夹及其内容的大小\n\n``` bash\ndu -sh logs/*\n```\n\n#### 将需要交互的命令的结果重定向到文件中\n\n``` bash\ntelnet zk_ip 2181 | tee -a  -i someFile\n\nenvi\n```","source":"_posts/Linux-Useful-command.md","raw":"---\ntitle: 实用Linux命令整理\ndate: 2017-09-09 17:16:00\ntags: Linux\n---\n\n#### 文件内容替换\n\n``` bash\nsudo sed -i 's/aaa/bbb/g' `grep -Rl aaa order_migrate_conf/`\n```\n\n#### 查找目录下的所有文件中是否含有某个字符串,并且只打印出文件名\n\n``` bash\ngrep -Rl 1496628000000 order_migrate_conf/\n```\n\n#### 查看超大文件，vim 慎用\n\n``` bash\nless file.log\n```\n\n\n#### 超大文件从后往前查找关键词kind_pay\n\n``` bash\ntac file_path | grep kind_pay\n```\n\nless file_path, G(go to file end), /kind_pay + enter, N(search key word reversely)\n\n#### 分类查看各种状态的TCP连接\n\n``` bash\nss  -tan|awk 'NR>1{++S[$1]}END{for (a in S) print a,S[a]}'\n```\n\n#### 查看logs目录下所有文件夹及其内容的大小\n\n``` bash\ndu -sh logs/*\n```\n\n#### 将需要交互的命令的结果重定向到文件中\n\n``` bash\ntelnet zk_ip 2181 | tee -a  -i someFile\n\nenvi\n```","slug":"Linux-Useful-command","published":1,"updated":"2017-10-24T05:49:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hrz000ixjq2z8va7v8n","content":"<h4 id=\"文件内容替换\"><a href=\"#文件内容替换\" class=\"headerlink\" title=\"文件内容替换\"></a>文件内容替换</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo sed -i <span class=\"string\">'s/aaa/bbb/g'</span> `grep -Rl aaa order_migrate_conf/`</div></pre></td></tr></table></figure>\n<h4 id=\"查找目录下的所有文件中是否含有某个字符串-并且只打印出文件名\"><a href=\"#查找目录下的所有文件中是否含有某个字符串-并且只打印出文件名\" class=\"headerlink\" title=\"查找目录下的所有文件中是否含有某个字符串,并且只打印出文件名\"></a>查找目录下的所有文件中是否含有某个字符串,并且只打印出文件名</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grep -Rl 1496628000000 order_migrate_conf/</div></pre></td></tr></table></figure>\n<h4 id=\"查看超大文件，vim-慎用\"><a href=\"#查看超大文件，vim-慎用\" class=\"headerlink\" title=\"查看超大文件，vim 慎用\"></a>查看超大文件，vim 慎用</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">less file.log</div></pre></td></tr></table></figure>\n<h4 id=\"超大文件从后往前查找关键词kind-pay\"><a href=\"#超大文件从后往前查找关键词kind-pay\" class=\"headerlink\" title=\"超大文件从后往前查找关键词kind_pay\"></a>超大文件从后往前查找关键词kind_pay</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tac file_path | grep kind_pay</div></pre></td></tr></table></figure>\n<p>less file_path, G(go to file end), /kind_pay + enter, N(search key word reversely)</p>\n<h4 id=\"分类查看各种状态的TCP连接\"><a href=\"#分类查看各种状态的TCP连接\" class=\"headerlink\" title=\"分类查看各种状态的TCP连接\"></a>分类查看各种状态的TCP连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ss  -tan|awk <span class=\"string\">'NR&gt;1&#123;++S[$1]&#125;END&#123;for (a in S) print a,S[a]&#125;'</span></div></pre></td></tr></table></figure>\n<h4 id=\"查看logs目录下所有文件夹及其内容的大小\"><a href=\"#查看logs目录下所有文件夹及其内容的大小\" class=\"headerlink\" title=\"查看logs目录下所有文件夹及其内容的大小\"></a>查看logs目录下所有文件夹及其内容的大小</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">du -sh logs/*</div></pre></td></tr></table></figure>\n<h4 id=\"将需要交互的命令的结果重定向到文件中\"><a href=\"#将需要交互的命令的结果重定向到文件中\" class=\"headerlink\" title=\"将需要交互的命令的结果重定向到文件中\"></a>将需要交互的命令的结果重定向到文件中</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">telnet zk_ip 2181 | tee -a  -i someFile</div><div class=\"line\"></div><div class=\"line\">envi</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"文件内容替换\"><a href=\"#文件内容替换\" class=\"headerlink\" title=\"文件内容替换\"></a>文件内容替换</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo sed -i <span class=\"string\">'s/aaa/bbb/g'</span> `grep -Rl aaa order_migrate_conf/`</div></pre></td></tr></table></figure>\n<h4 id=\"查找目录下的所有文件中是否含有某个字符串-并且只打印出文件名\"><a href=\"#查找目录下的所有文件中是否含有某个字符串-并且只打印出文件名\" class=\"headerlink\" title=\"查找目录下的所有文件中是否含有某个字符串,并且只打印出文件名\"></a>查找目录下的所有文件中是否含有某个字符串,并且只打印出文件名</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grep -Rl 1496628000000 order_migrate_conf/</div></pre></td></tr></table></figure>\n<h4 id=\"查看超大文件，vim-慎用\"><a href=\"#查看超大文件，vim-慎用\" class=\"headerlink\" title=\"查看超大文件，vim 慎用\"></a>查看超大文件，vim 慎用</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">less file.log</div></pre></td></tr></table></figure>\n<h4 id=\"超大文件从后往前查找关键词kind-pay\"><a href=\"#超大文件从后往前查找关键词kind-pay\" class=\"headerlink\" title=\"超大文件从后往前查找关键词kind_pay\"></a>超大文件从后往前查找关键词kind_pay</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tac file_path | grep kind_pay</div></pre></td></tr></table></figure>\n<p>less file_path, G(go to file end), /kind_pay + enter, N(search key word reversely)</p>\n<h4 id=\"分类查看各种状态的TCP连接\"><a href=\"#分类查看各种状态的TCP连接\" class=\"headerlink\" title=\"分类查看各种状态的TCP连接\"></a>分类查看各种状态的TCP连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ss  -tan|awk <span class=\"string\">'NR&gt;1&#123;++S[$1]&#125;END&#123;for (a in S) print a,S[a]&#125;'</span></div></pre></td></tr></table></figure>\n<h4 id=\"查看logs目录下所有文件夹及其内容的大小\"><a href=\"#查看logs目录下所有文件夹及其内容的大小\" class=\"headerlink\" title=\"查看logs目录下所有文件夹及其内容的大小\"></a>查看logs目录下所有文件夹及其内容的大小</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">du -sh logs/*</div></pre></td></tr></table></figure>\n<h4 id=\"将需要交互的命令的结果重定向到文件中\"><a href=\"#将需要交互的命令的结果重定向到文件中\" class=\"headerlink\" title=\"将需要交互的命令的结果重定向到文件中\"></a>将需要交互的命令的结果重定向到文件中</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">telnet zk_ip 2181 | tee -a  -i someFile</div><div class=\"line\"></div><div class=\"line\">envi</div></pre></td></tr></table></figure>"},{"title":"MySQL Explain 整理","date":"2017-09-10T05:11:34.000Z","_content":"\n## select id\n\n``` sql\nexplain select * from student where stu_id = '1000003';\nexplain delete from student where stu_id = '11111';\n#数值越大越先执行\nexplain select * from (select * from student where stu_id = '1000003') tmp; \n#只有union的结果是没有 select id 的\nexplain select * from student where stu_id = '1000003' union select * from student where stu_id = '1000004';\n```\n\nMore info: [MySQL DOC](https://dev.mysql.com/doc/refman/5.7/en/explain-output.html)","source":"_posts/MySQL-Explain.md","raw":"---\ntitle: MySQL Explain 整理\ndate: 2017-09-10 13:11:34\ntags: MySQL\n---\n\n## select id\n\n``` sql\nexplain select * from student where stu_id = '1000003';\nexplain delete from student where stu_id = '11111';\n#数值越大越先执行\nexplain select * from (select * from student where stu_id = '1000003') tmp; \n#只有union的结果是没有 select id 的\nexplain select * from student where stu_id = '1000003' union select * from student where stu_id = '1000004';\n```\n\nMore info: [MySQL DOC](https://dev.mysql.com/doc/refman/5.7/en/explain-output.html)","slug":"MySQL-Explain","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hs2000lxjq2vauz51kr","content":"<h2 id=\"select-id\"><a href=\"#select-id\" class=\"headerlink\" title=\"select id\"></a>select id</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> stu_id = <span class=\"string\">'1000003'</span>;</div><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> stu_id = <span class=\"string\">'11111'</span>;</div><div class=\"line\">#数值越大越先执行</div><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> stu_id = <span class=\"string\">'1000003'</span>) tmp; </div><div class=\"line\">#只有union的结果是没有 select id 的</div><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> stu_id = <span class=\"string\">'1000003'</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> stu_id = <span class=\"string\">'1000004'</span>;</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://dev.mysql.com/doc/refman/5.7/en/explain-output.html\" target=\"_blank\" rel=\"external\">MySQL DOC</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"select-id\"><a href=\"#select-id\" class=\"headerlink\" title=\"select id\"></a>select id</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> stu_id = <span class=\"string\">'1000003'</span>;</div><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> stu_id = <span class=\"string\">'11111'</span>;</div><div class=\"line\">#数值越大越先执行</div><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> stu_id = <span class=\"string\">'1000003'</span>) tmp; </div><div class=\"line\">#只有union的结果是没有 select id 的</div><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> stu_id = <span class=\"string\">'1000003'</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> stu_id = <span class=\"string\">'1000004'</span>;</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://dev.mysql.com/doc/refman/5.7/en/explain-output.html\" target=\"_blank\" rel=\"external\">MySQL DOC</a></p>\n"},{"title":"RocketMQ——Consumer Rebalance 原理分析","date":"2017-09-19T08:58:43.000Z","_content":"","source":"_posts/RocketMQ-Consumer-rebalance.md","raw":"---\ntitle: RocketMQ——Consumer Rebalance 原理分析\ndate: 2017-09-19 16:58:43\ntags: RocketMQ\n---\n","slug":"RocketMQ-Consumer-rebalance","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hs5000nxjq27qdluwf4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Netty-FAQ","date":"2017-10-16T06:25:04.000Z","_content":"\n### Netty 编解码器\nByteToMessageDecoder与LengthFieldBasedFrameDecoder的区别\n\n### 重要概念 Future and Promise\n\n### 如何调试时间循环线程\n当我们用debug启动netty server时，我们不知道boss线程运行的代码，那怎么样才能发现boss线程当前的执行轨迹呢。如果能找到轨迹，对我们研究boss线程有非常大的帮助。\n\n给boss时间循环线程池起个名字\n``` java\n NioEventLoopGroup boss = new NioEventLoopGroup(0, new ThreadFactory() {\n    @Override\n    public Thread newThread(Runnable r) {\n        return new Thread(r, \"boss-event-loop\");\n    }\n});\n```\n如果用的Intellij，就能实现这个效果，首先用debug模式启动netty server。在debug tag下，我们进入Threads，展开**Thread Group \"main\"**，发现**boss-event-loop**正在处于Running状态。选中**boss-event-loop**，右键点击**suspend**，之后就能看到代码停了下来，去**Frames**tab中选择某一行进行断点调试。\n\n### 聊天程序\nWeb Socket技术\nLong Pooling技术\n\n### 原生NIO可能会被问到的问题\n\n### Netty线程管理，高低水位线(watermark)控制\nhttps://stackoverflow.com/questions/25281124/netty-4-high-and-low-write-watermarks\nhttp://adolgarev.blogspot.ru/2013/12/pipelining-and-flow-control.html?view=flipcard\n\n### Netty线程模型，Netty异常对Inbound(入站)和Outbound(出站) Handler的影响\n\n### Netty内存管理，怎么防止内存过度使用\n\nio模型，上面图里的问题，内存池怎么管理，怎么防止泄露。\nmq主从切换，但是网络原因master假死， 这时候slave升级为主，怎么办？\n和mysql主从切换一个道理，我不知道怎么办。或者怎么屏蔽。\n\n\n","source":"_posts/Netty-FAQ.md","raw":"---\ntitle: Netty-FAQ\ndate: 2017-10-16 14:25:04\ntags:\n---\n\n### Netty 编解码器\nByteToMessageDecoder与LengthFieldBasedFrameDecoder的区别\n\n### 重要概念 Future and Promise\n\n### 如何调试时间循环线程\n当我们用debug启动netty server时，我们不知道boss线程运行的代码，那怎么样才能发现boss线程当前的执行轨迹呢。如果能找到轨迹，对我们研究boss线程有非常大的帮助。\n\n给boss时间循环线程池起个名字\n``` java\n NioEventLoopGroup boss = new NioEventLoopGroup(0, new ThreadFactory() {\n    @Override\n    public Thread newThread(Runnable r) {\n        return new Thread(r, \"boss-event-loop\");\n    }\n});\n```\n如果用的Intellij，就能实现这个效果，首先用debug模式启动netty server。在debug tag下，我们进入Threads，展开**Thread Group \"main\"**，发现**boss-event-loop**正在处于Running状态。选中**boss-event-loop**，右键点击**suspend**，之后就能看到代码停了下来，去**Frames**tab中选择某一行进行断点调试。\n\n### 聊天程序\nWeb Socket技术\nLong Pooling技术\n\n### 原生NIO可能会被问到的问题\n\n### Netty线程管理，高低水位线(watermark)控制\nhttps://stackoverflow.com/questions/25281124/netty-4-high-and-low-write-watermarks\nhttp://adolgarev.blogspot.ru/2013/12/pipelining-and-flow-control.html?view=flipcard\n\n### Netty线程模型，Netty异常对Inbound(入站)和Outbound(出站) Handler的影响\n\n### Netty内存管理，怎么防止内存过度使用\n\nio模型，上面图里的问题，内存池怎么管理，怎么防止泄露。\nmq主从切换，但是网络原因master假死， 这时候slave升级为主，怎么办？\n和mysql主从切换一个道理，我不知道怎么办。或者怎么屏蔽。\n\n\n","slug":"Netty-FAQ","published":1,"updated":"2017-10-20T14:31:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hs7000oxjq2bvkvcofo","content":"<h3 id=\"Netty-编解码器\"><a href=\"#Netty-编解码器\" class=\"headerlink\" title=\"Netty 编解码器\"></a>Netty 编解码器</h3><p>ByteToMessageDecoder与LengthFieldBasedFrameDecoder的区别</p>\n<h3 id=\"重要概念-Future-and-Promise\"><a href=\"#重要概念-Future-and-Promise\" class=\"headerlink\" title=\"重要概念 Future and Promise\"></a>重要概念 Future and Promise</h3><h3 id=\"如何调试时间循环线程\"><a href=\"#如何调试时间循环线程\" class=\"headerlink\" title=\"如何调试时间循环线程\"></a>如何调试时间循环线程</h3><p>当我们用debug启动netty server时，我们不知道boss线程运行的代码，那怎么样才能发现boss线程当前的执行轨迹呢。如果能找到轨迹，对我们研究boss线程有非常大的帮助。</p>\n<p>给boss时间循环线程池起个名字<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> NioEventLoopGroup boss = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> ThreadFactory() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Thread(r, <span class=\"string\">\"boss-event-loop\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果用的Intellij，就能实现这个效果，首先用debug模式启动netty server。在debug tag下，我们进入Threads，展开<strong>Thread Group “main”</strong>，发现<strong>boss-event-loop</strong>正在处于Running状态。选中<strong>boss-event-loop</strong>，右键点击<strong>suspend</strong>，之后就能看到代码停了下来，去<strong>Frames</strong>tab中选择某一行进行断点调试。</p>\n<h3 id=\"聊天程序\"><a href=\"#聊天程序\" class=\"headerlink\" title=\"聊天程序\"></a>聊天程序</h3><p>Web Socket技术<br>Long Pooling技术</p>\n<h3 id=\"原生NIO可能会被问到的问题\"><a href=\"#原生NIO可能会被问到的问题\" class=\"headerlink\" title=\"原生NIO可能会被问到的问题\"></a>原生NIO可能会被问到的问题</h3><h3 id=\"Netty线程管理，高低水位线-watermark-控制\"><a href=\"#Netty线程管理，高低水位线-watermark-控制\" class=\"headerlink\" title=\"Netty线程管理，高低水位线(watermark)控制\"></a>Netty线程管理，高低水位线(watermark)控制</h3><p><a href=\"https://stackoverflow.com/questions/25281124/netty-4-high-and-low-write-watermarks\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/25281124/netty-4-high-and-low-write-watermarks</a><br><a href=\"http://adolgarev.blogspot.ru/2013/12/pipelining-and-flow-control.html?view=flipcard\" target=\"_blank\" rel=\"external\">http://adolgarev.blogspot.ru/2013/12/pipelining-and-flow-control.html?view=flipcard</a></p>\n<h3 id=\"Netty线程模型，Netty异常对Inbound-入站-和Outbound-出站-Handler的影响\"><a href=\"#Netty线程模型，Netty异常对Inbound-入站-和Outbound-出站-Handler的影响\" class=\"headerlink\" title=\"Netty线程模型，Netty异常对Inbound(入站)和Outbound(出站) Handler的影响\"></a>Netty线程模型，Netty异常对Inbound(入站)和Outbound(出站) Handler的影响</h3><h3 id=\"Netty内存管理，怎么防止内存过度使用\"><a href=\"#Netty内存管理，怎么防止内存过度使用\" class=\"headerlink\" title=\"Netty内存管理，怎么防止内存过度使用\"></a>Netty内存管理，怎么防止内存过度使用</h3><p>io模型，上面图里的问题，内存池怎么管理，怎么防止泄露。<br>mq主从切换，但是网络原因master假死， 这时候slave升级为主，怎么办？<br>和mysql主从切换一个道理，我不知道怎么办。或者怎么屏蔽。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Netty-编解码器\"><a href=\"#Netty-编解码器\" class=\"headerlink\" title=\"Netty 编解码器\"></a>Netty 编解码器</h3><p>ByteToMessageDecoder与LengthFieldBasedFrameDecoder的区别</p>\n<h3 id=\"重要概念-Future-and-Promise\"><a href=\"#重要概念-Future-and-Promise\" class=\"headerlink\" title=\"重要概念 Future and Promise\"></a>重要概念 Future and Promise</h3><h3 id=\"如何调试时间循环线程\"><a href=\"#如何调试时间循环线程\" class=\"headerlink\" title=\"如何调试时间循环线程\"></a>如何调试时间循环线程</h3><p>当我们用debug启动netty server时，我们不知道boss线程运行的代码，那怎么样才能发现boss线程当前的执行轨迹呢。如果能找到轨迹，对我们研究boss线程有非常大的帮助。</p>\n<p>给boss时间循环线程池起个名字<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> NioEventLoopGroup boss = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> ThreadFactory() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Thread(r, <span class=\"string\">\"boss-event-loop\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果用的Intellij，就能实现这个效果，首先用debug模式启动netty server。在debug tag下，我们进入Threads，展开<strong>Thread Group “main”</strong>，发现<strong>boss-event-loop</strong>正在处于Running状态。选中<strong>boss-event-loop</strong>，右键点击<strong>suspend</strong>，之后就能看到代码停了下来，去<strong>Frames</strong>tab中选择某一行进行断点调试。</p>\n<h3 id=\"聊天程序\"><a href=\"#聊天程序\" class=\"headerlink\" title=\"聊天程序\"></a>聊天程序</h3><p>Web Socket技术<br>Long Pooling技术</p>\n<h3 id=\"原生NIO可能会被问到的问题\"><a href=\"#原生NIO可能会被问到的问题\" class=\"headerlink\" title=\"原生NIO可能会被问到的问题\"></a>原生NIO可能会被问到的问题</h3><h3 id=\"Netty线程管理，高低水位线-watermark-控制\"><a href=\"#Netty线程管理，高低水位线-watermark-控制\" class=\"headerlink\" title=\"Netty线程管理，高低水位线(watermark)控制\"></a>Netty线程管理，高低水位线(watermark)控制</h3><p><a href=\"https://stackoverflow.com/questions/25281124/netty-4-high-and-low-write-watermarks\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/25281124/netty-4-high-and-low-write-watermarks</a><br><a href=\"http://adolgarev.blogspot.ru/2013/12/pipelining-and-flow-control.html?view=flipcard\" target=\"_blank\" rel=\"external\">http://adolgarev.blogspot.ru/2013/12/pipelining-and-flow-control.html?view=flipcard</a></p>\n<h3 id=\"Netty线程模型，Netty异常对Inbound-入站-和Outbound-出站-Handler的影响\"><a href=\"#Netty线程模型，Netty异常对Inbound-入站-和Outbound-出站-Handler的影响\" class=\"headerlink\" title=\"Netty线程模型，Netty异常对Inbound(入站)和Outbound(出站) Handler的影响\"></a>Netty线程模型，Netty异常对Inbound(入站)和Outbound(出站) Handler的影响</h3><h3 id=\"Netty内存管理，怎么防止内存过度使用\"><a href=\"#Netty内存管理，怎么防止内存过度使用\" class=\"headerlink\" title=\"Netty内存管理，怎么防止内存过度使用\"></a>Netty内存管理，怎么防止内存过度使用</h3><p>io模型，上面图里的问题，内存池怎么管理，怎么防止泄露。<br>mq主从切换，但是网络原因master假死， 这时候slave升级为主，怎么办？<br>和mysql主从切换一个道理，我不知道怎么办。或者怎么屏蔽。</p>\n"},{"title":"RocketMQ在Intellij中的终极调试技巧（一）","date":"2017-08-20T05:28:52.000Z","_content":"\n### 调试难点\n\n如果虚拟机够多\n可以规划将MQ的各个部分部署在不同机器上，并且在所有子系统启动时加上远程调试。然后Intellij创建几个Remote debug窗口。\n\n如果没有虚拟机，只有一台Mac，接下去的内容将对RocketMQ的调试有非常大的帮助。\n\n### 调试界面\n\n![image.png](http://upload-images.jianshu.io/upload_images/716353-1c36c4f4f54283e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### Name Server\n\n### Broker\nBroker的调试最为麻烦，\n如果在学习RocketMQ的初期，建议单启动一个Broker，减少复杂度，关注主要流程代码。\n如果要深入学习和调试，要启动Master和Slave，开启主从同步功能，也是会发生端口和文件目录冲突的地方。\n\nstore的目录都为`System.getProperty(\"user.home\") + File.separator + \"store\"`，\n所以我们需要对Master和Slave进行分离，方法很多种，这里介绍一种，在启动参数中配置不同的`user.home`。\n\nPort的分离可以放在不同的配置文件中：broker-a.properties，broker-a-s.properties\n\n#### Master Broker\n\n```\nVM options:-Drocketmq.home.dir=/Users/eric/Code/middleware/incubator-rocketmq -Drocketmq.namesrv.addr=mac:9876 -Duser.home=/Users/eric/store/master\nProgram arguments:-c /Users/eric/Code/middleware/incubator-rocketmq/conf/2m-2s-sync/broker-a.properties\n\nbroker-a.properties:\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=11111\n```\n\n![image.png](http://upload-images.jianshu.io/upload_images/716353-269519f3558de100.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### Slave Broker\n```\nVM options:-Drocketmq.home.dir=/Users/eric/Code/middleware/incubator-rocketmq -Drocketmq.namesrv.addr=mac:9876 -Duser.home=/Users/eric/store/slave\nProgram arguments:-c /Users/eric/Code/middleware/incubator-rocketmq/conf/2m-2s-sync/broker-a-s.properties\n\nbroker-a-s.properties:\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SLAVE\nflushDiskType=ASYNC_FLUSH\nlistenPort=22222\n```\n\n![image.png](http://upload-images.jianshu.io/upload_images/716353-473218e8e6936674.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n配置完后依次启动 Name Server, Master Broker, Slave Broker， Producer\n\n完整的Store目录结构截图\n\n![](https://ws1.sinaimg.cn/large/006tKfTcgy1fkedpuigp8j317e1a80zy.jpg)","source":"_posts/RocketMQ-Debug-with-intellij.md","raw":"---\ntitle: RocketMQ在Intellij中的终极调试技巧（一）\ndate: 2017-08-20 13:28:52\ntags: RocketMQ\n---\n\n### 调试难点\n\n如果虚拟机够多\n可以规划将MQ的各个部分部署在不同机器上，并且在所有子系统启动时加上远程调试。然后Intellij创建几个Remote debug窗口。\n\n如果没有虚拟机，只有一台Mac，接下去的内容将对RocketMQ的调试有非常大的帮助。\n\n### 调试界面\n\n![image.png](http://upload-images.jianshu.io/upload_images/716353-1c36c4f4f54283e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### Name Server\n\n### Broker\nBroker的调试最为麻烦，\n如果在学习RocketMQ的初期，建议单启动一个Broker，减少复杂度，关注主要流程代码。\n如果要深入学习和调试，要启动Master和Slave，开启主从同步功能，也是会发生端口和文件目录冲突的地方。\n\nstore的目录都为`System.getProperty(\"user.home\") + File.separator + \"store\"`，\n所以我们需要对Master和Slave进行分离，方法很多种，这里介绍一种，在启动参数中配置不同的`user.home`。\n\nPort的分离可以放在不同的配置文件中：broker-a.properties，broker-a-s.properties\n\n#### Master Broker\n\n```\nVM options:-Drocketmq.home.dir=/Users/eric/Code/middleware/incubator-rocketmq -Drocketmq.namesrv.addr=mac:9876 -Duser.home=/Users/eric/store/master\nProgram arguments:-c /Users/eric/Code/middleware/incubator-rocketmq/conf/2m-2s-sync/broker-a.properties\n\nbroker-a.properties:\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=11111\n```\n\n![image.png](http://upload-images.jianshu.io/upload_images/716353-269519f3558de100.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### Slave Broker\n```\nVM options:-Drocketmq.home.dir=/Users/eric/Code/middleware/incubator-rocketmq -Drocketmq.namesrv.addr=mac:9876 -Duser.home=/Users/eric/store/slave\nProgram arguments:-c /Users/eric/Code/middleware/incubator-rocketmq/conf/2m-2s-sync/broker-a-s.properties\n\nbroker-a-s.properties:\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SLAVE\nflushDiskType=ASYNC_FLUSH\nlistenPort=22222\n```\n\n![image.png](http://upload-images.jianshu.io/upload_images/716353-473218e8e6936674.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n配置完后依次启动 Name Server, Master Broker, Slave Broker， Producer\n\n完整的Store目录结构截图\n\n![](https://ws1.sinaimg.cn/large/006tKfTcgy1fkedpuigp8j317e1a80zy.jpg)","slug":"RocketMQ-Debug-with-intellij","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hsa000rxjq2uv2mzto3","content":"<h3 id=\"调试难点\"><a href=\"#调试难点\" class=\"headerlink\" title=\"调试难点\"></a>调试难点</h3><p>如果虚拟机够多<br>可以规划将MQ的各个部分部署在不同机器上，并且在所有子系统启动时加上远程调试。然后Intellij创建几个Remote debug窗口。</p>\n<p>如果没有虚拟机，只有一台Mac，接下去的内容将对RocketMQ的调试有非常大的帮助。</p>\n<h3 id=\"调试界面\"><a href=\"#调试界面\" class=\"headerlink\" title=\"调试界面\"></a>调试界面</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/716353-1c36c4f4f54283e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"Name-Server\"><a href=\"#Name-Server\" class=\"headerlink\" title=\"Name Server\"></a>Name Server</h3><h3 id=\"Broker\"><a href=\"#Broker\" class=\"headerlink\" title=\"Broker\"></a>Broker</h3><p>Broker的调试最为麻烦，<br>如果在学习RocketMQ的初期，建议单启动一个Broker，减少复杂度，关注主要流程代码。<br>如果要深入学习和调试，要启动Master和Slave，开启主从同步功能，也是会发生端口和文件目录冲突的地方。</p>\n<p>store的目录都为<code>System.getProperty(&quot;user.home&quot;) + File.separator + &quot;store&quot;</code>，<br>所以我们需要对Master和Slave进行分离，方法很多种，这里介绍一种，在启动参数中配置不同的<code>user.home</code>。</p>\n<p>Port的分离可以放在不同的配置文件中：broker-a.properties，broker-a-s.properties</p>\n<h4 id=\"Master-Broker\"><a href=\"#Master-Broker\" class=\"headerlink\" title=\"Master Broker\"></a>Master Broker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">VM options:-Drocketmq.home.dir=/Users/eric/Code/middleware/incubator-rocketmq -Drocketmq.namesrv.addr=mac:9876 -Duser.home=/Users/eric/store/master</div><div class=\"line\">Program arguments:-c /Users/eric/Code/middleware/incubator-rocketmq/conf/2m-2s-sync/broker-a.properties</div><div class=\"line\"></div><div class=\"line\">broker-a.properties:</div><div class=\"line\">brokerClusterName=DefaultCluster</div><div class=\"line\">brokerName=broker-a</div><div class=\"line\">brokerId=0</div><div class=\"line\">deleteWhen=04</div><div class=\"line\">fileReservedTime=48</div><div class=\"line\">brokerRole=SYNC_MASTER</div><div class=\"line\">flushDiskType=ASYNC_FLUSH</div><div class=\"line\">listenPort=11111</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/716353-269519f3558de100.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"Slave-Broker\"><a href=\"#Slave-Broker\" class=\"headerlink\" title=\"Slave Broker\"></a>Slave Broker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">VM options:-Drocketmq.home.dir=/Users/eric/Code/middleware/incubator-rocketmq -Drocketmq.namesrv.addr=mac:9876 -Duser.home=/Users/eric/store/slave</div><div class=\"line\">Program arguments:-c /Users/eric/Code/middleware/incubator-rocketmq/conf/2m-2s-sync/broker-a-s.properties</div><div class=\"line\"></div><div class=\"line\">broker-a-s.properties:</div><div class=\"line\">brokerClusterName=DefaultCluster</div><div class=\"line\">brokerName=broker-a</div><div class=\"line\">brokerId=1</div><div class=\"line\">deleteWhen=04</div><div class=\"line\">fileReservedTime=48</div><div class=\"line\">brokerRole=SLAVE</div><div class=\"line\">flushDiskType=ASYNC_FLUSH</div><div class=\"line\">listenPort=22222</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/716353-473218e8e6936674.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>配置完后依次启动 Name Server, Master Broker, Slave Broker， Producer</p>\n<p>完整的Store目录结构截图</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fkedpuigp8j317e1a80zy.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"调试难点\"><a href=\"#调试难点\" class=\"headerlink\" title=\"调试难点\"></a>调试难点</h3><p>如果虚拟机够多<br>可以规划将MQ的各个部分部署在不同机器上，并且在所有子系统启动时加上远程调试。然后Intellij创建几个Remote debug窗口。</p>\n<p>如果没有虚拟机，只有一台Mac，接下去的内容将对RocketMQ的调试有非常大的帮助。</p>\n<h3 id=\"调试界面\"><a href=\"#调试界面\" class=\"headerlink\" title=\"调试界面\"></a>调试界面</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/716353-1c36c4f4f54283e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"Name-Server\"><a href=\"#Name-Server\" class=\"headerlink\" title=\"Name Server\"></a>Name Server</h3><h3 id=\"Broker\"><a href=\"#Broker\" class=\"headerlink\" title=\"Broker\"></a>Broker</h3><p>Broker的调试最为麻烦，<br>如果在学习RocketMQ的初期，建议单启动一个Broker，减少复杂度，关注主要流程代码。<br>如果要深入学习和调试，要启动Master和Slave，开启主从同步功能，也是会发生端口和文件目录冲突的地方。</p>\n<p>store的目录都为<code>System.getProperty(&quot;user.home&quot;) + File.separator + &quot;store&quot;</code>，<br>所以我们需要对Master和Slave进行分离，方法很多种，这里介绍一种，在启动参数中配置不同的<code>user.home</code>。</p>\n<p>Port的分离可以放在不同的配置文件中：broker-a.properties，broker-a-s.properties</p>\n<h4 id=\"Master-Broker\"><a href=\"#Master-Broker\" class=\"headerlink\" title=\"Master Broker\"></a>Master Broker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">VM options:-Drocketmq.home.dir=/Users/eric/Code/middleware/incubator-rocketmq -Drocketmq.namesrv.addr=mac:9876 -Duser.home=/Users/eric/store/master</div><div class=\"line\">Program arguments:-c /Users/eric/Code/middleware/incubator-rocketmq/conf/2m-2s-sync/broker-a.properties</div><div class=\"line\"></div><div class=\"line\">broker-a.properties:</div><div class=\"line\">brokerClusterName=DefaultCluster</div><div class=\"line\">brokerName=broker-a</div><div class=\"line\">brokerId=0</div><div class=\"line\">deleteWhen=04</div><div class=\"line\">fileReservedTime=48</div><div class=\"line\">brokerRole=SYNC_MASTER</div><div class=\"line\">flushDiskType=ASYNC_FLUSH</div><div class=\"line\">listenPort=11111</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/716353-269519f3558de100.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"Slave-Broker\"><a href=\"#Slave-Broker\" class=\"headerlink\" title=\"Slave Broker\"></a>Slave Broker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">VM options:-Drocketmq.home.dir=/Users/eric/Code/middleware/incubator-rocketmq -Drocketmq.namesrv.addr=mac:9876 -Duser.home=/Users/eric/store/slave</div><div class=\"line\">Program arguments:-c /Users/eric/Code/middleware/incubator-rocketmq/conf/2m-2s-sync/broker-a-s.properties</div><div class=\"line\"></div><div class=\"line\">broker-a-s.properties:</div><div class=\"line\">brokerClusterName=DefaultCluster</div><div class=\"line\">brokerName=broker-a</div><div class=\"line\">brokerId=1</div><div class=\"line\">deleteWhen=04</div><div class=\"line\">fileReservedTime=48</div><div class=\"line\">brokerRole=SLAVE</div><div class=\"line\">flushDiskType=ASYNC_FLUSH</div><div class=\"line\">listenPort=22222</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/716353-473218e8e6936674.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>配置完后依次启动 Name Server, Master Broker, Slave Broker， Producer</p>\n<p>完整的Store目录结构截图</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fkedpuigp8j317e1a80zy.jpg\" alt=\"\"></p>\n"},{"title":"RocketMQ——延时消息投递原理分析","date":"2017-10-13T02:38:19.000Z","_content":"\n### 被动延时消费\n\n### 主动延时消费\n\n### 分布式事务之 Best Effort Delivery","source":"_posts/RocketMQ-Delay-message-delivery.md","raw":"---\ntitle: RocketMQ——延时消息投递原理分析\ndate: 2017-10-13 10:38:19\ntags: RocketMQ\n---\n\n### 被动延时消费\n\n### 主动延时消费\n\n### 分布式事务之 Best Effort Delivery","slug":"RocketMQ-Delay-message-delivery","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hsc000sxjq2fvcdbf04","content":"<h3 id=\"被动延时消费\"><a href=\"#被动延时消费\" class=\"headerlink\" title=\"被动延时消费\"></a>被动延时消费</h3><h3 id=\"主动延时消费\"><a href=\"#主动延时消费\" class=\"headerlink\" title=\"主动延时消费\"></a>主动延时消费</h3><h3 id=\"分布式事务之-Best-Effort-Delivery\"><a href=\"#分布式事务之-Best-Effort-Delivery\" class=\"headerlink\" title=\"分布式事务之 Best Effort Delivery\"></a>分布式事务之 Best Effort Delivery</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"被动延时消费\"><a href=\"#被动延时消费\" class=\"headerlink\" title=\"被动延时消费\"></a>被动延时消费</h3><h3 id=\"主动延时消费\"><a href=\"#主动延时消费\" class=\"headerlink\" title=\"主动延时消费\"></a>主动延时消费</h3><h3 id=\"分布式事务之-Best-Effort-Delivery\"><a href=\"#分布式事务之-Best-Effort-Delivery\" class=\"headerlink\" title=\"分布式事务之 Best Effort Delivery\"></a>分布式事务之 Best Effort Delivery</h3>"},{"title":"面向问题的RocketMQ原理整理","date":"2017-08-09T06:42:53.000Z","_content":"\n工作和学习中使用RocketMQ产生的困惑和总结，属于临时半成品文章，整理完了会单独成文。\n\n#### 为什么RocketMQ性能很高？\n\n主要是消息存储的方式影响着性能。\n\n#### MQ为什么内部要使用好多队列？\n\n理论上队列入口要加锁（要么是程序的锁，要么是文件的锁）来保证同步，如果队列非常多，虽然不能把锁去掉，但可以减小并发线程对锁的竞争。这个是以前的结论，但实际情况是，consume queue只有一个线程来做。首先，commit log文件只有一个，假如要执行sendMessage，一定要用sync或者自旋锁（之后的版本为了考虑性能），消息都是顺序写进commit log的。对于一个topic的某一个consumer group，consumerQueue文件就有很多个，写consumerQueue文件由一个ReputMessageService的线程近实时空转而触发，也是单个线程。从写consumerQueue文件（send message）的角度来分析，多个队列是没有好处的。如果从读consumerQueue文件（pull message）的角度来分析。\n\n#### MQ的NameServer集群节点中间有没有同步数据？与Zookeeper集群的区别是什么？\n\n#### MQ的topic有序性怎么保证\n\nMessageQueueSelector中的List<MessageQueue> mqs指的是所有的broker加起来的队列。\n\n#### 怎么让两个Broker中都有某个topic的信息，如果只有一个有，就没法做send的双broker负载均衡\n\nClient发送一个新的topic，在name server上是取不到信息的，所以先用在本地放上Map来缓存，那问题是Broker什么时候给name server发送创建Topic route info的请求？在checkMsg方法中，this.brokerController.registerBrokerAll(false, true);\nMQ的消费者端如果是用push的方式回调，执行listener会开启新的线程用来接收和返回（确认）ack，但一般我们会再开我们的新线程去做消费的事情，这个时候如果由于外界原因进程死亡，那么这些消息就丢失了。\n\n#### 哪些情况会引起rebalance?    \n\nmq数量，客户端数量\n\n#### 怎么设计Netty的同步调用与异步调用？\n\n掌握CountDownLatch和（限流）\n\n#### 万一NameServer都被重启过，那producer或者consumer调用getTopicRouteInfo，信息从何而来？\n\n1. UpdateRouteInfo应该会上传一个新的Topic的信息。\n\n#### RocketMQ落盘是异步+定时的，还是就异步的？\n\n异步+定时，时间默认为500ms。\n\nClient向broker pull message 都是以一个一个queue为单位的。processQueueTable代表，这里面的queue正在源源不断向broker请求数据中。而broker的queue的数量是可能发生变化的，所以，要时常对processQueueTable进行必要的整理。\n\n一个Subscription对应一次rebalance调用，一般的情况是n个topic+1个Retry topic。每一次rebalance调用，都会对当前的topic分配broker中的MQ队列，如果分到n个，那个生成n个PullRequest。\n\nRebalanceServer生成 PullRequest 会调用PullMessageService 放入 PullRequest的pullRequestQueue中，PullMessageService从pullRequestQueue队列中take出PullRequest，异步调用Netty。当网络将数据传输回来时，调用PullCallback中的ConsumeMessageService，遍历所有原始消费，对每个消息，生成一个ConsumeRequest，开启多线程进行消费。消费时，返回值怎么处理？比如 Re-consume-later, success。客户端开启一个线程定时去更新Broker的consumerOffset。\n\n#### 为什么一旦有producer发送了消息，consumer会几乎无延迟得立刻收到消息？\n\n首先网络层，和基于事件编程的Netty有关。跟网络有关，网络收到数据后，立刻进入回调代码。ReputService空轮询有关。\n\n技巧\n\n1. 充分利用作者写好的单元测试，对原理的掌握会有帮助\n2. RocketMQ有太多的事情是用 （短时间）定时+唤醒 的方式异步执行的，想要更好得了解原理，最好把定时的时间改得大一点，这样多线程的调试会好做很多。\n\n未解决问题：\n\n#### Broker里面的protectBroker是用来做什么的？\n\n#### CommitLog和ConsumerQueue这两个文件的读写是顺序的么？效率怎么样？\n\n#### RocketMQ在哪几种情况下，可能会出现消息重复的问题？\n\n1. 一个consume_group一开始订阅了*tag，之后加了具体的，会发生什么。\n\n#### afka的发送消息性能非常高，常用于日志缓冲，是不是用「Oneway」的方式？不然producer发送请求，broker处理请求，producer接受响应，这三段的时间是无论如何都无法缩减的。\n\n#### RocketMQ的事务消息是什么？\n看到一段描述很有趣，当发送了分布式事务消息时，如果Producer因为意外宕机，Broker会回调Producer Group的另一一台Producer来确认事务状态。\n2. Commit Log 中存储了所有的元信息，包含消息体，类似于 Mysql、Oracle 的 redolog，所以只要有 Commit\n   Log 在，Consume Queue 即使数据丢失，仍然可以恢复出来。怎么理解？\n3. 在Broker的SendMessageProcessor中，主干线程中只做了一件事，那就是把最新的消息Append到CommitLog中，并且通知Flush线程去force() mmap。所以，构建ConsumeQueue，构建索引这些事情都是异步的，那好像也没有看到通知这些线程，究竟是在哪里通知的呢？ Dispatcher（调度器）ReputMessageService。\n\n#### Debug形式启动Producer，Producer发送消息，断点停止后，Producer发送消息会超时失败3次，但此时如果松开断点，让他执行完，那消息是在CommitLog中呢，还是不在？\n\n#### MQ在关闭的时候，CommitLog的内容和ConsumeQueue的内容需要能对上号的，但万一异常关闭导致没有对上号，应该怎么处理？CheckPoint机制有没有用？\n\n#### 一个消息已经消费过了，能在控制台上选择进行重复投递么？\n\n可以。\n\n#### Page Cache到底是个什么东西？\n\n#### 对于不可读的Consume Queue，Consumer rebalance时会不会考虑到？\n\n如果没有考虑到，那不可读的队列也分给了Consumer，造成Consumer的浪费。看过源码了，没有问题。\n\n#### topic中有readQ, writeQ, 那topic本身的权限是用来做什么的？\n\n#### 多个namesrv不一致问题\n\n#### 如果某个topic的consume queue上有数据，那设置可读可写队列为0后，数据是不是读不到了。（我知道不会丢失）\n\n#### 写Consume queue完全是一个单线程DefaultMessageStore.ReputMessageService中，那就没有锁竞争了，一个Topic到底放多少个队列效率达到最高，是越少越好，还是越多越好？\n\n#### namesrv是无状态的，可以随意部署，但Broker启动后怎么是怎么知道新增加的namesrv的？\n\n#### 如果发送了某个topic的某个tag的消息，那订阅了该topic的consumer是有可能过滤掉该tag的信息的。那怎么样才能知道该消息是“订阅了，被过滤了”的状态呢？\n\n#### ConsumerQueue文件删除了，能够复原么？原理\n\n#### index file删除了，能够复原么？原理\n\n#### ReputMessageService中空转监听是Commitog的offset，当有新的消息时，先是构建consume queue，然后通知PullMessageHoldService，那整个过程在哪里对消息进行过滤，过滤用的是tag，consume queue中也有tag的hash，是不是只需要对比这两个值就好？\n5. 如果一个4G的文件用mmap映射到Java的MappedByteBuffer中，是绝对不可能整体加载进内存的。一个ByteBuffer就是一个有限的byte数组，但是，我们理论上可以在这个数组的任何位置（position）对数组进行读和写，然后映射进文件。如果OS能预感到我们的文件是顺序读写的，那么内存到文件的速度会非常快，如果是随机的，OS没法预测下次的读写位置，这样速度会变慢（这部分去查询下）\n6. PullConsumer：用consumer.pull(MessageQueue mq, String subExpression, long offset, int maxNums)方法去获取Broker的消息，如果第一次offset传了0，获取到了数据，第二次还是传0，还是能获取到数据，是什么原因？Broker的consumerOffset.json为什么不起作用？Pull和Push消费到的点什么时候会被persist到config/consumerOffset.json?详见MQClientInstance.persistAllConsumerOffset会把offsetTable定时发到Broker。\n\n#### 程序中处理MappedByteBuffer要特别注意些什么？\n\nA MemoryMappedBuffer has a fixed size, but the file it’s mapped to is elastic.所以一旦当前的程序（或者说当前的线程）对文件的内容失去了独占权，比如文件的内容被其它的线程改了，那原先的线程访问MappedByteBuffer对应位置的缓存就会抛出异常，所以，当我们要用MappedByteBuffer时，一定要确保在多线程下是互斥的。\n\n#### RocketMQ发送，接受消息的性能与队列数量的关系。\n\n可以查看kafka相关的信息。\n\n#### 如果让你设计一个消息中间件？你会怎么设计？\n\n#### 如果一个消息没有消费成功，会隔1s,5s,ns重新消费，这个是怎么实现的？\n\n#### 构建IndexService是否可以做成异步？\n\n因为它如果卡住，会影响长轮询，从而影响消息接收的实时性。\n\n#### Netty线程问题\nnetty在触发channelRead0的时候，所用的线程是不是workEventLoopGroup所指定的线程\nnettyClientWorkerThread\n\n#### netty eventLoopGroup 是什么？\n\n#### 网络端口映射\nServer:8080\ncurl 'localhost:8080'\nlsof -i:8080\n\n#### 待解决问题\n```\norg.apache.rocketmq.client.exception.MQClientException: No route info of this topic, binlog-msg\nSee http://rocketmq.apache.org/docs/faq/ for further details.\n\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:537)\n\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:1038)\n\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:996)\n\tat org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:212)\n\tat org.apache.rock\n```\n\n#### 问题\n2017-10-11 07:21:38 WARN SendMessageThread_1 - Offset for /root/store/commitlog/00000000002147483648 not matched. Request offset: 4051326754958557513, index: -521875234, mappedFileSize: 1073741824, mappedFiles count: 1\n2017-10-11 07:21:38 WARN SendMessageThread_1 - findMappedFileByOffset failure. \njava.lang.ArrayIndexOutOfBoundsException: -521875234\n\n请教：rocketmq的这个异常应该如何解决呢？\n","source":"_posts/RocketMQ-FAQ.md","raw":"---\ntitle: 面向问题的RocketMQ原理整理\ndate: 2017-08-09 14:42:53\ntags: RocketMQ\n---\n\n工作和学习中使用RocketMQ产生的困惑和总结，属于临时半成品文章，整理完了会单独成文。\n\n#### 为什么RocketMQ性能很高？\n\n主要是消息存储的方式影响着性能。\n\n#### MQ为什么内部要使用好多队列？\n\n理论上队列入口要加锁（要么是程序的锁，要么是文件的锁）来保证同步，如果队列非常多，虽然不能把锁去掉，但可以减小并发线程对锁的竞争。这个是以前的结论，但实际情况是，consume queue只有一个线程来做。首先，commit log文件只有一个，假如要执行sendMessage，一定要用sync或者自旋锁（之后的版本为了考虑性能），消息都是顺序写进commit log的。对于一个topic的某一个consumer group，consumerQueue文件就有很多个，写consumerQueue文件由一个ReputMessageService的线程近实时空转而触发，也是单个线程。从写consumerQueue文件（send message）的角度来分析，多个队列是没有好处的。如果从读consumerQueue文件（pull message）的角度来分析。\n\n#### MQ的NameServer集群节点中间有没有同步数据？与Zookeeper集群的区别是什么？\n\n#### MQ的topic有序性怎么保证\n\nMessageQueueSelector中的List<MessageQueue> mqs指的是所有的broker加起来的队列。\n\n#### 怎么让两个Broker中都有某个topic的信息，如果只有一个有，就没法做send的双broker负载均衡\n\nClient发送一个新的topic，在name server上是取不到信息的，所以先用在本地放上Map来缓存，那问题是Broker什么时候给name server发送创建Topic route info的请求？在checkMsg方法中，this.brokerController.registerBrokerAll(false, true);\nMQ的消费者端如果是用push的方式回调，执行listener会开启新的线程用来接收和返回（确认）ack，但一般我们会再开我们的新线程去做消费的事情，这个时候如果由于外界原因进程死亡，那么这些消息就丢失了。\n\n#### 哪些情况会引起rebalance?    \n\nmq数量，客户端数量\n\n#### 怎么设计Netty的同步调用与异步调用？\n\n掌握CountDownLatch和（限流）\n\n#### 万一NameServer都被重启过，那producer或者consumer调用getTopicRouteInfo，信息从何而来？\n\n1. UpdateRouteInfo应该会上传一个新的Topic的信息。\n\n#### RocketMQ落盘是异步+定时的，还是就异步的？\n\n异步+定时，时间默认为500ms。\n\nClient向broker pull message 都是以一个一个queue为单位的。processQueueTable代表，这里面的queue正在源源不断向broker请求数据中。而broker的queue的数量是可能发生变化的，所以，要时常对processQueueTable进行必要的整理。\n\n一个Subscription对应一次rebalance调用，一般的情况是n个topic+1个Retry topic。每一次rebalance调用，都会对当前的topic分配broker中的MQ队列，如果分到n个，那个生成n个PullRequest。\n\nRebalanceServer生成 PullRequest 会调用PullMessageService 放入 PullRequest的pullRequestQueue中，PullMessageService从pullRequestQueue队列中take出PullRequest，异步调用Netty。当网络将数据传输回来时，调用PullCallback中的ConsumeMessageService，遍历所有原始消费，对每个消息，生成一个ConsumeRequest，开启多线程进行消费。消费时，返回值怎么处理？比如 Re-consume-later, success。客户端开启一个线程定时去更新Broker的consumerOffset。\n\n#### 为什么一旦有producer发送了消息，consumer会几乎无延迟得立刻收到消息？\n\n首先网络层，和基于事件编程的Netty有关。跟网络有关，网络收到数据后，立刻进入回调代码。ReputService空轮询有关。\n\n技巧\n\n1. 充分利用作者写好的单元测试，对原理的掌握会有帮助\n2. RocketMQ有太多的事情是用 （短时间）定时+唤醒 的方式异步执行的，想要更好得了解原理，最好把定时的时间改得大一点，这样多线程的调试会好做很多。\n\n未解决问题：\n\n#### Broker里面的protectBroker是用来做什么的？\n\n#### CommitLog和ConsumerQueue这两个文件的读写是顺序的么？效率怎么样？\n\n#### RocketMQ在哪几种情况下，可能会出现消息重复的问题？\n\n1. 一个consume_group一开始订阅了*tag，之后加了具体的，会发生什么。\n\n#### afka的发送消息性能非常高，常用于日志缓冲，是不是用「Oneway」的方式？不然producer发送请求，broker处理请求，producer接受响应，这三段的时间是无论如何都无法缩减的。\n\n#### RocketMQ的事务消息是什么？\n看到一段描述很有趣，当发送了分布式事务消息时，如果Producer因为意外宕机，Broker会回调Producer Group的另一一台Producer来确认事务状态。\n2. Commit Log 中存储了所有的元信息，包含消息体，类似于 Mysql、Oracle 的 redolog，所以只要有 Commit\n   Log 在，Consume Queue 即使数据丢失，仍然可以恢复出来。怎么理解？\n3. 在Broker的SendMessageProcessor中，主干线程中只做了一件事，那就是把最新的消息Append到CommitLog中，并且通知Flush线程去force() mmap。所以，构建ConsumeQueue，构建索引这些事情都是异步的，那好像也没有看到通知这些线程，究竟是在哪里通知的呢？ Dispatcher（调度器）ReputMessageService。\n\n#### Debug形式启动Producer，Producer发送消息，断点停止后，Producer发送消息会超时失败3次，但此时如果松开断点，让他执行完，那消息是在CommitLog中呢，还是不在？\n\n#### MQ在关闭的时候，CommitLog的内容和ConsumeQueue的内容需要能对上号的，但万一异常关闭导致没有对上号，应该怎么处理？CheckPoint机制有没有用？\n\n#### 一个消息已经消费过了，能在控制台上选择进行重复投递么？\n\n可以。\n\n#### Page Cache到底是个什么东西？\n\n#### 对于不可读的Consume Queue，Consumer rebalance时会不会考虑到？\n\n如果没有考虑到，那不可读的队列也分给了Consumer，造成Consumer的浪费。看过源码了，没有问题。\n\n#### topic中有readQ, writeQ, 那topic本身的权限是用来做什么的？\n\n#### 多个namesrv不一致问题\n\n#### 如果某个topic的consume queue上有数据，那设置可读可写队列为0后，数据是不是读不到了。（我知道不会丢失）\n\n#### 写Consume queue完全是一个单线程DefaultMessageStore.ReputMessageService中，那就没有锁竞争了，一个Topic到底放多少个队列效率达到最高，是越少越好，还是越多越好？\n\n#### namesrv是无状态的，可以随意部署，但Broker启动后怎么是怎么知道新增加的namesrv的？\n\n#### 如果发送了某个topic的某个tag的消息，那订阅了该topic的consumer是有可能过滤掉该tag的信息的。那怎么样才能知道该消息是“订阅了，被过滤了”的状态呢？\n\n#### ConsumerQueue文件删除了，能够复原么？原理\n\n#### index file删除了，能够复原么？原理\n\n#### ReputMessageService中空转监听是Commitog的offset，当有新的消息时，先是构建consume queue，然后通知PullMessageHoldService，那整个过程在哪里对消息进行过滤，过滤用的是tag，consume queue中也有tag的hash，是不是只需要对比这两个值就好？\n5. 如果一个4G的文件用mmap映射到Java的MappedByteBuffer中，是绝对不可能整体加载进内存的。一个ByteBuffer就是一个有限的byte数组，但是，我们理论上可以在这个数组的任何位置（position）对数组进行读和写，然后映射进文件。如果OS能预感到我们的文件是顺序读写的，那么内存到文件的速度会非常快，如果是随机的，OS没法预测下次的读写位置，这样速度会变慢（这部分去查询下）\n6. PullConsumer：用consumer.pull(MessageQueue mq, String subExpression, long offset, int maxNums)方法去获取Broker的消息，如果第一次offset传了0，获取到了数据，第二次还是传0，还是能获取到数据，是什么原因？Broker的consumerOffset.json为什么不起作用？Pull和Push消费到的点什么时候会被persist到config/consumerOffset.json?详见MQClientInstance.persistAllConsumerOffset会把offsetTable定时发到Broker。\n\n#### 程序中处理MappedByteBuffer要特别注意些什么？\n\nA MemoryMappedBuffer has a fixed size, but the file it’s mapped to is elastic.所以一旦当前的程序（或者说当前的线程）对文件的内容失去了独占权，比如文件的内容被其它的线程改了，那原先的线程访问MappedByteBuffer对应位置的缓存就会抛出异常，所以，当我们要用MappedByteBuffer时，一定要确保在多线程下是互斥的。\n\n#### RocketMQ发送，接受消息的性能与队列数量的关系。\n\n可以查看kafka相关的信息。\n\n#### 如果让你设计一个消息中间件？你会怎么设计？\n\n#### 如果一个消息没有消费成功，会隔1s,5s,ns重新消费，这个是怎么实现的？\n\n#### 构建IndexService是否可以做成异步？\n\n因为它如果卡住，会影响长轮询，从而影响消息接收的实时性。\n\n#### Netty线程问题\nnetty在触发channelRead0的时候，所用的线程是不是workEventLoopGroup所指定的线程\nnettyClientWorkerThread\n\n#### netty eventLoopGroup 是什么？\n\n#### 网络端口映射\nServer:8080\ncurl 'localhost:8080'\nlsof -i:8080\n\n#### 待解决问题\n```\norg.apache.rocketmq.client.exception.MQClientException: No route info of this topic, binlog-msg\nSee http://rocketmq.apache.org/docs/faq/ for further details.\n\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:537)\n\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:1038)\n\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:996)\n\tat org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:212)\n\tat org.apache.rock\n```\n\n#### 问题\n2017-10-11 07:21:38 WARN SendMessageThread_1 - Offset for /root/store/commitlog/00000000002147483648 not matched. Request offset: 4051326754958557513, index: -521875234, mappedFileSize: 1073741824, mappedFiles count: 1\n2017-10-11 07:21:38 WARN SendMessageThread_1 - findMappedFileByOffset failure. \njava.lang.ArrayIndexOutOfBoundsException: -521875234\n\n请教：rocketmq的这个异常应该如何解决呢？\n","slug":"RocketMQ-FAQ","published":1,"updated":"2017-10-18T02:30:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hsf000uxjq2q2kjtecp","content":"<p>工作和学习中使用RocketMQ产生的困惑和总结，属于临时半成品文章，整理完了会单独成文。</p>\n<h4 id=\"为什么RocketMQ性能很高？\"><a href=\"#为什么RocketMQ性能很高？\" class=\"headerlink\" title=\"为什么RocketMQ性能很高？\"></a>为什么RocketMQ性能很高？</h4><p>主要是消息存储的方式影响着性能。</p>\n<h4 id=\"MQ为什么内部要使用好多队列？\"><a href=\"#MQ为什么内部要使用好多队列？\" class=\"headerlink\" title=\"MQ为什么内部要使用好多队列？\"></a>MQ为什么内部要使用好多队列？</h4><p>理论上队列入口要加锁（要么是程序的锁，要么是文件的锁）来保证同步，如果队列非常多，虽然不能把锁去掉，但可以减小并发线程对锁的竞争。这个是以前的结论，但实际情况是，consume queue只有一个线程来做。首先，commit log文件只有一个，假如要执行sendMessage，一定要用sync或者自旋锁（之后的版本为了考虑性能），消息都是顺序写进commit log的。对于一个topic的某一个consumer group，consumerQueue文件就有很多个，写consumerQueue文件由一个ReputMessageService的线程近实时空转而触发，也是单个线程。从写consumerQueue文件（send message）的角度来分析，多个队列是没有好处的。如果从读consumerQueue文件（pull message）的角度来分析。</p>\n<h4 id=\"MQ的NameServer集群节点中间有没有同步数据？与Zookeeper集群的区别是什么？\"><a href=\"#MQ的NameServer集群节点中间有没有同步数据？与Zookeeper集群的区别是什么？\" class=\"headerlink\" title=\"MQ的NameServer集群节点中间有没有同步数据？与Zookeeper集群的区别是什么？\"></a>MQ的NameServer集群节点中间有没有同步数据？与Zookeeper集群的区别是什么？</h4><h4 id=\"MQ的topic有序性怎么保证\"><a href=\"#MQ的topic有序性怎么保证\" class=\"headerlink\" title=\"MQ的topic有序性怎么保证\"></a>MQ的topic有序性怎么保证</h4><p>MessageQueueSelector中的List<messagequeue> mqs指的是所有的broker加起来的队列。</messagequeue></p>\n<h4 id=\"怎么让两个Broker中都有某个topic的信息，如果只有一个有，就没法做send的双broker负载均衡\"><a href=\"#怎么让两个Broker中都有某个topic的信息，如果只有一个有，就没法做send的双broker负载均衡\" class=\"headerlink\" title=\"怎么让两个Broker中都有某个topic的信息，如果只有一个有，就没法做send的双broker负载均衡\"></a>怎么让两个Broker中都有某个topic的信息，如果只有一个有，就没法做send的双broker负载均衡</h4><p>Client发送一个新的topic，在name server上是取不到信息的，所以先用在本地放上Map来缓存，那问题是Broker什么时候给name server发送创建Topic route info的请求？在checkMsg方法中，this.brokerController.registerBrokerAll(false, true);<br>MQ的消费者端如果是用push的方式回调，执行listener会开启新的线程用来接收和返回（确认）ack，但一般我们会再开我们的新线程去做消费的事情，这个时候如果由于外界原因进程死亡，那么这些消息就丢失了。</p>\n<h4 id=\"哪些情况会引起rebalance\"><a href=\"#哪些情况会引起rebalance\" class=\"headerlink\" title=\"哪些情况会引起rebalance?\"></a>哪些情况会引起rebalance?</h4><p>mq数量，客户端数量</p>\n<h4 id=\"怎么设计Netty的同步调用与异步调用？\"><a href=\"#怎么设计Netty的同步调用与异步调用？\" class=\"headerlink\" title=\"怎么设计Netty的同步调用与异步调用？\"></a>怎么设计Netty的同步调用与异步调用？</h4><p>掌握CountDownLatch和（限流）</p>\n<h4 id=\"万一NameServer都被重启过，那producer或者consumer调用getTopicRouteInfo，信息从何而来？\"><a href=\"#万一NameServer都被重启过，那producer或者consumer调用getTopicRouteInfo，信息从何而来？\" class=\"headerlink\" title=\"万一NameServer都被重启过，那producer或者consumer调用getTopicRouteInfo，信息从何而来？\"></a>万一NameServer都被重启过，那producer或者consumer调用getTopicRouteInfo，信息从何而来？</h4><ol>\n<li>UpdateRouteInfo应该会上传一个新的Topic的信息。</li>\n</ol>\n<h4 id=\"RocketMQ落盘是异步-定时的，还是就异步的？\"><a href=\"#RocketMQ落盘是异步-定时的，还是就异步的？\" class=\"headerlink\" title=\"RocketMQ落盘是异步+定时的，还是就异步的？\"></a>RocketMQ落盘是异步+定时的，还是就异步的？</h4><p>异步+定时，时间默认为500ms。</p>\n<p>Client向broker pull message 都是以一个一个queue为单位的。processQueueTable代表，这里面的queue正在源源不断向broker请求数据中。而broker的queue的数量是可能发生变化的，所以，要时常对processQueueTable进行必要的整理。</p>\n<p>一个Subscription对应一次rebalance调用，一般的情况是n个topic+1个Retry topic。每一次rebalance调用，都会对当前的topic分配broker中的MQ队列，如果分到n个，那个生成n个PullRequest。</p>\n<p>RebalanceServer生成 PullRequest 会调用PullMessageService 放入 PullRequest的pullRequestQueue中，PullMessageService从pullRequestQueue队列中take出PullRequest，异步调用Netty。当网络将数据传输回来时，调用PullCallback中的ConsumeMessageService，遍历所有原始消费，对每个消息，生成一个ConsumeRequest，开启多线程进行消费。消费时，返回值怎么处理？比如 Re-consume-later, success。客户端开启一个线程定时去更新Broker的consumerOffset。</p>\n<h4 id=\"为什么一旦有producer发送了消息，consumer会几乎无延迟得立刻收到消息？\"><a href=\"#为什么一旦有producer发送了消息，consumer会几乎无延迟得立刻收到消息？\" class=\"headerlink\" title=\"为什么一旦有producer发送了消息，consumer会几乎无延迟得立刻收到消息？\"></a>为什么一旦有producer发送了消息，consumer会几乎无延迟得立刻收到消息？</h4><p>首先网络层，和基于事件编程的Netty有关。跟网络有关，网络收到数据后，立刻进入回调代码。ReputService空轮询有关。</p>\n<p>技巧</p>\n<ol>\n<li>充分利用作者写好的单元测试，对原理的掌握会有帮助</li>\n<li>RocketMQ有太多的事情是用 （短时间）定时+唤醒 的方式异步执行的，想要更好得了解原理，最好把定时的时间改得大一点，这样多线程的调试会好做很多。</li>\n</ol>\n<p>未解决问题：</p>\n<h4 id=\"Broker里面的protectBroker是用来做什么的？\"><a href=\"#Broker里面的protectBroker是用来做什么的？\" class=\"headerlink\" title=\"Broker里面的protectBroker是用来做什么的？\"></a>Broker里面的protectBroker是用来做什么的？</h4><h4 id=\"CommitLog和ConsumerQueue这两个文件的读写是顺序的么？效率怎么样？\"><a href=\"#CommitLog和ConsumerQueue这两个文件的读写是顺序的么？效率怎么样？\" class=\"headerlink\" title=\"CommitLog和ConsumerQueue这两个文件的读写是顺序的么？效率怎么样？\"></a>CommitLog和ConsumerQueue这两个文件的读写是顺序的么？效率怎么样？</h4><h4 id=\"RocketMQ在哪几种情况下，可能会出现消息重复的问题？\"><a href=\"#RocketMQ在哪几种情况下，可能会出现消息重复的问题？\" class=\"headerlink\" title=\"RocketMQ在哪几种情况下，可能会出现消息重复的问题？\"></a>RocketMQ在哪几种情况下，可能会出现消息重复的问题？</h4><ol>\n<li>一个consume_group一开始订阅了*tag，之后加了具体的，会发生什么。</li>\n</ol>\n<h4 id=\"afka的发送消息性能非常高，常用于日志缓冲，是不是用「Oneway」的方式？不然producer发送请求，broker处理请求，producer接受响应，这三段的时间是无论如何都无法缩减的。\"><a href=\"#afka的发送消息性能非常高，常用于日志缓冲，是不是用「Oneway」的方式？不然producer发送请求，broker处理请求，producer接受响应，这三段的时间是无论如何都无法缩减的。\" class=\"headerlink\" title=\"afka的发送消息性能非常高，常用于日志缓冲，是不是用「Oneway」的方式？不然producer发送请求，broker处理请求，producer接受响应，这三段的时间是无论如何都无法缩减的。\"></a>afka的发送消息性能非常高，常用于日志缓冲，是不是用「Oneway」的方式？不然producer发送请求，broker处理请求，producer接受响应，这三段的时间是无论如何都无法缩减的。</h4><h4 id=\"RocketMQ的事务消息是什么？\"><a href=\"#RocketMQ的事务消息是什么？\" class=\"headerlink\" title=\"RocketMQ的事务消息是什么？\"></a>RocketMQ的事务消息是什么？</h4><p>看到一段描述很有趣，当发送了分布式事务消息时，如果Producer因为意外宕机，Broker会回调Producer Group的另一一台Producer来确认事务状态。</p>\n<ol>\n<li>Commit Log 中存储了所有的元信息，包含消息体，类似于 Mysql、Oracle 的 redolog，所以只要有 Commit<br>Log 在，Consume Queue 即使数据丢失，仍然可以恢复出来。怎么理解？</li>\n<li>在Broker的SendMessageProcessor中，主干线程中只做了一件事，那就是把最新的消息Append到CommitLog中，并且通知Flush线程去force() mmap。所以，构建ConsumeQueue，构建索引这些事情都是异步的，那好像也没有看到通知这些线程，究竟是在哪里通知的呢？ Dispatcher（调度器）ReputMessageService。</li>\n</ol>\n<h4 id=\"Debug形式启动Producer，Producer发送消息，断点停止后，Producer发送消息会超时失败3次，但此时如果松开断点，让他执行完，那消息是在CommitLog中呢，还是不在？\"><a href=\"#Debug形式启动Producer，Producer发送消息，断点停止后，Producer发送消息会超时失败3次，但此时如果松开断点，让他执行完，那消息是在CommitLog中呢，还是不在？\" class=\"headerlink\" title=\"Debug形式启动Producer，Producer发送消息，断点停止后，Producer发送消息会超时失败3次，但此时如果松开断点，让他执行完，那消息是在CommitLog中呢，还是不在？\"></a>Debug形式启动Producer，Producer发送消息，断点停止后，Producer发送消息会超时失败3次，但此时如果松开断点，让他执行完，那消息是在CommitLog中呢，还是不在？</h4><h4 id=\"MQ在关闭的时候，CommitLog的内容和ConsumeQueue的内容需要能对上号的，但万一异常关闭导致没有对上号，应该怎么处理？CheckPoint机制有没有用？\"><a href=\"#MQ在关闭的时候，CommitLog的内容和ConsumeQueue的内容需要能对上号的，但万一异常关闭导致没有对上号，应该怎么处理？CheckPoint机制有没有用？\" class=\"headerlink\" title=\"MQ在关闭的时候，CommitLog的内容和ConsumeQueue的内容需要能对上号的，但万一异常关闭导致没有对上号，应该怎么处理？CheckPoint机制有没有用？\"></a>MQ在关闭的时候，CommitLog的内容和ConsumeQueue的内容需要能对上号的，但万一异常关闭导致没有对上号，应该怎么处理？CheckPoint机制有没有用？</h4><h4 id=\"一个消息已经消费过了，能在控制台上选择进行重复投递么？\"><a href=\"#一个消息已经消费过了，能在控制台上选择进行重复投递么？\" class=\"headerlink\" title=\"一个消息已经消费过了，能在控制台上选择进行重复投递么？\"></a>一个消息已经消费过了，能在控制台上选择进行重复投递么？</h4><p>可以。</p>\n<h4 id=\"Page-Cache到底是个什么东西？\"><a href=\"#Page-Cache到底是个什么东西？\" class=\"headerlink\" title=\"Page Cache到底是个什么东西？\"></a>Page Cache到底是个什么东西？</h4><h4 id=\"对于不可读的Consume-Queue，Consumer-rebalance时会不会考虑到？\"><a href=\"#对于不可读的Consume-Queue，Consumer-rebalance时会不会考虑到？\" class=\"headerlink\" title=\"对于不可读的Consume Queue，Consumer rebalance时会不会考虑到？\"></a>对于不可读的Consume Queue，Consumer rebalance时会不会考虑到？</h4><p>如果没有考虑到，那不可读的队列也分给了Consumer，造成Consumer的浪费。看过源码了，没有问题。</p>\n<h4 id=\"topic中有readQ-writeQ-那topic本身的权限是用来做什么的？\"><a href=\"#topic中有readQ-writeQ-那topic本身的权限是用来做什么的？\" class=\"headerlink\" title=\"topic中有readQ, writeQ, 那topic本身的权限是用来做什么的？\"></a>topic中有readQ, writeQ, 那topic本身的权限是用来做什么的？</h4><h4 id=\"多个namesrv不一致问题\"><a href=\"#多个namesrv不一致问题\" class=\"headerlink\" title=\"多个namesrv不一致问题\"></a>多个namesrv不一致问题</h4><h4 id=\"如果某个topic的consume-queue上有数据，那设置可读可写队列为0后，数据是不是读不到了。（我知道不会丢失）\"><a href=\"#如果某个topic的consume-queue上有数据，那设置可读可写队列为0后，数据是不是读不到了。（我知道不会丢失）\" class=\"headerlink\" title=\"如果某个topic的consume queue上有数据，那设置可读可写队列为0后，数据是不是读不到了。（我知道不会丢失）\"></a>如果某个topic的consume queue上有数据，那设置可读可写队列为0后，数据是不是读不到了。（我知道不会丢失）</h4><h4 id=\"写Consume-queue完全是一个单线程DefaultMessageStore-ReputMessageService中，那就没有锁竞争了，一个Topic到底放多少个队列效率达到最高，是越少越好，还是越多越好？\"><a href=\"#写Consume-queue完全是一个单线程DefaultMessageStore-ReputMessageService中，那就没有锁竞争了，一个Topic到底放多少个队列效率达到最高，是越少越好，还是越多越好？\" class=\"headerlink\" title=\"写Consume queue完全是一个单线程DefaultMessageStore.ReputMessageService中，那就没有锁竞争了，一个Topic到底放多少个队列效率达到最高，是越少越好，还是越多越好？\"></a>写Consume queue完全是一个单线程DefaultMessageStore.ReputMessageService中，那就没有锁竞争了，一个Topic到底放多少个队列效率达到最高，是越少越好，还是越多越好？</h4><h4 id=\"namesrv是无状态的，可以随意部署，但Broker启动后怎么是怎么知道新增加的namesrv的？\"><a href=\"#namesrv是无状态的，可以随意部署，但Broker启动后怎么是怎么知道新增加的namesrv的？\" class=\"headerlink\" title=\"namesrv是无状态的，可以随意部署，但Broker启动后怎么是怎么知道新增加的namesrv的？\"></a>namesrv是无状态的，可以随意部署，但Broker启动后怎么是怎么知道新增加的namesrv的？</h4><h4 id=\"如果发送了某个topic的某个tag的消息，那订阅了该topic的consumer是有可能过滤掉该tag的信息的。那怎么样才能知道该消息是“订阅了，被过滤了”的状态呢？\"><a href=\"#如果发送了某个topic的某个tag的消息，那订阅了该topic的consumer是有可能过滤掉该tag的信息的。那怎么样才能知道该消息是“订阅了，被过滤了”的状态呢？\" class=\"headerlink\" title=\"如果发送了某个topic的某个tag的消息，那订阅了该topic的consumer是有可能过滤掉该tag的信息的。那怎么样才能知道该消息是“订阅了，被过滤了”的状态呢？\"></a>如果发送了某个topic的某个tag的消息，那订阅了该topic的consumer是有可能过滤掉该tag的信息的。那怎么样才能知道该消息是“订阅了，被过滤了”的状态呢？</h4><h4 id=\"ConsumerQueue文件删除了，能够复原么？原理\"><a href=\"#ConsumerQueue文件删除了，能够复原么？原理\" class=\"headerlink\" title=\"ConsumerQueue文件删除了，能够复原么？原理\"></a>ConsumerQueue文件删除了，能够复原么？原理</h4><h4 id=\"index-file删除了，能够复原么？原理\"><a href=\"#index-file删除了，能够复原么？原理\" class=\"headerlink\" title=\"index file删除了，能够复原么？原理\"></a>index file删除了，能够复原么？原理</h4><h4 id=\"ReputMessageService中空转监听是Commitog的offset，当有新的消息时，先是构建consume-queue，然后通知PullMessageHoldService，那整个过程在哪里对消息进行过滤，过滤用的是tag，consume-queue中也有tag的hash，是不是只需要对比这两个值就好？\"><a href=\"#ReputMessageService中空转监听是Commitog的offset，当有新的消息时，先是构建consume-queue，然后通知PullMessageHoldService，那整个过程在哪里对消息进行过滤，过滤用的是tag，consume-queue中也有tag的hash，是不是只需要对比这两个值就好？\" class=\"headerlink\" title=\"ReputMessageService中空转监听是Commitog的offset，当有新的消息时，先是构建consume queue，然后通知PullMessageHoldService，那整个过程在哪里对消息进行过滤，过滤用的是tag，consume queue中也有tag的hash，是不是只需要对比这两个值就好？\"></a>ReputMessageService中空转监听是Commitog的offset，当有新的消息时，先是构建consume queue，然后通知PullMessageHoldService，那整个过程在哪里对消息进行过滤，过滤用的是tag，consume queue中也有tag的hash，是不是只需要对比这两个值就好？</h4><ol>\n<li>如果一个4G的文件用mmap映射到Java的MappedByteBuffer中，是绝对不可能整体加载进内存的。一个ByteBuffer就是一个有限的byte数组，但是，我们理论上可以在这个数组的任何位置（position）对数组进行读和写，然后映射进文件。如果OS能预感到我们的文件是顺序读写的，那么内存到文件的速度会非常快，如果是随机的，OS没法预测下次的读写位置，这样速度会变慢（这部分去查询下）</li>\n<li>PullConsumer：用consumer.pull(MessageQueue mq, String subExpression, long offset, int maxNums)方法去获取Broker的消息，如果第一次offset传了0，获取到了数据，第二次还是传0，还是能获取到数据，是什么原因？Broker的consumerOffset.json为什么不起作用？Pull和Push消费到的点什么时候会被persist到config/consumerOffset.json?详见MQClientInstance.persistAllConsumerOffset会把offsetTable定时发到Broker。</li>\n</ol>\n<h4 id=\"程序中处理MappedByteBuffer要特别注意些什么？\"><a href=\"#程序中处理MappedByteBuffer要特别注意些什么？\" class=\"headerlink\" title=\"程序中处理MappedByteBuffer要特别注意些什么？\"></a>程序中处理MappedByteBuffer要特别注意些什么？</h4><p>A MemoryMappedBuffer has a fixed size, but the file it’s mapped to is elastic.所以一旦当前的程序（或者说当前的线程）对文件的内容失去了独占权，比如文件的内容被其它的线程改了，那原先的线程访问MappedByteBuffer对应位置的缓存就会抛出异常，所以，当我们要用MappedByteBuffer时，一定要确保在多线程下是互斥的。</p>\n<h4 id=\"RocketMQ发送，接受消息的性能与队列数量的关系。\"><a href=\"#RocketMQ发送，接受消息的性能与队列数量的关系。\" class=\"headerlink\" title=\"RocketMQ发送，接受消息的性能与队列数量的关系。\"></a>RocketMQ发送，接受消息的性能与队列数量的关系。</h4><p>可以查看kafka相关的信息。</p>\n<h4 id=\"如果让你设计一个消息中间件？你会怎么设计？\"><a href=\"#如果让你设计一个消息中间件？你会怎么设计？\" class=\"headerlink\" title=\"如果让你设计一个消息中间件？你会怎么设计？\"></a>如果让你设计一个消息中间件？你会怎么设计？</h4><h4 id=\"如果一个消息没有消费成功，会隔1s-5s-ns重新消费，这个是怎么实现的？\"><a href=\"#如果一个消息没有消费成功，会隔1s-5s-ns重新消费，这个是怎么实现的？\" class=\"headerlink\" title=\"如果一个消息没有消费成功，会隔1s,5s,ns重新消费，这个是怎么实现的？\"></a>如果一个消息没有消费成功，会隔1s,5s,ns重新消费，这个是怎么实现的？</h4><h4 id=\"构建IndexService是否可以做成异步？\"><a href=\"#构建IndexService是否可以做成异步？\" class=\"headerlink\" title=\"构建IndexService是否可以做成异步？\"></a>构建IndexService是否可以做成异步？</h4><p>因为它如果卡住，会影响长轮询，从而影响消息接收的实时性。</p>\n<h4 id=\"Netty线程问题\"><a href=\"#Netty线程问题\" class=\"headerlink\" title=\"Netty线程问题\"></a>Netty线程问题</h4><p>netty在触发channelRead0的时候，所用的线程是不是workEventLoopGroup所指定的线程<br>nettyClientWorkerThread</p>\n<h4 id=\"netty-eventLoopGroup-是什么？\"><a href=\"#netty-eventLoopGroup-是什么？\" class=\"headerlink\" title=\"netty eventLoopGroup 是什么？\"></a>netty eventLoopGroup 是什么？</h4><h4 id=\"网络端口映射\"><a href=\"#网络端口映射\" class=\"headerlink\" title=\"网络端口映射\"></a>网络端口映射</h4><p>Server:8080<br>curl ‘localhost:8080’<br>lsof -i:8080</p>\n<h4 id=\"待解决问题\"><a href=\"#待解决问题\" class=\"headerlink\" title=\"待解决问题\"></a>待解决问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.apache.rocketmq.client.exception.MQClientException: No route info of this topic, binlog-msg</div><div class=\"line\">See http://rocketmq.apache.org/docs/faq/ for further details.</div><div class=\"line\">\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:537)</div><div class=\"line\">\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:1038)</div><div class=\"line\">\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:996)</div><div class=\"line\">\tat org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:212)</div><div class=\"line\">\tat org.apache.rock</div></pre></td></tr></table></figure>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>2017-10-11 07:21:38 WARN SendMessageThread_1 - Offset for /root/store/commitlog/00000000002147483648 not matched. Request offset: 4051326754958557513, index: -521875234, mappedFileSize: 1073741824, mappedFiles count: 1<br>2017-10-11 07:21:38 WARN SendMessageThread_1 - findMappedFileByOffset failure.<br>java.lang.ArrayIndexOutOfBoundsException: -521875234</p>\n<p>请教：rocketmq的这个异常应该如何解决呢？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>工作和学习中使用RocketMQ产生的困惑和总结，属于临时半成品文章，整理完了会单独成文。</p>\n<h4 id=\"为什么RocketMQ性能很高？\"><a href=\"#为什么RocketMQ性能很高？\" class=\"headerlink\" title=\"为什么RocketMQ性能很高？\"></a>为什么RocketMQ性能很高？</h4><p>主要是消息存储的方式影响着性能。</p>\n<h4 id=\"MQ为什么内部要使用好多队列？\"><a href=\"#MQ为什么内部要使用好多队列？\" class=\"headerlink\" title=\"MQ为什么内部要使用好多队列？\"></a>MQ为什么内部要使用好多队列？</h4><p>理论上队列入口要加锁（要么是程序的锁，要么是文件的锁）来保证同步，如果队列非常多，虽然不能把锁去掉，但可以减小并发线程对锁的竞争。这个是以前的结论，但实际情况是，consume queue只有一个线程来做。首先，commit log文件只有一个，假如要执行sendMessage，一定要用sync或者自旋锁（之后的版本为了考虑性能），消息都是顺序写进commit log的。对于一个topic的某一个consumer group，consumerQueue文件就有很多个，写consumerQueue文件由一个ReputMessageService的线程近实时空转而触发，也是单个线程。从写consumerQueue文件（send message）的角度来分析，多个队列是没有好处的。如果从读consumerQueue文件（pull message）的角度来分析。</p>\n<h4 id=\"MQ的NameServer集群节点中间有没有同步数据？与Zookeeper集群的区别是什么？\"><a href=\"#MQ的NameServer集群节点中间有没有同步数据？与Zookeeper集群的区别是什么？\" class=\"headerlink\" title=\"MQ的NameServer集群节点中间有没有同步数据？与Zookeeper集群的区别是什么？\"></a>MQ的NameServer集群节点中间有没有同步数据？与Zookeeper集群的区别是什么？</h4><h4 id=\"MQ的topic有序性怎么保证\"><a href=\"#MQ的topic有序性怎么保证\" class=\"headerlink\" title=\"MQ的topic有序性怎么保证\"></a>MQ的topic有序性怎么保证</h4><p>MessageQueueSelector中的List<messagequeue> mqs指的是所有的broker加起来的队列。</messagequeue></p>\n<h4 id=\"怎么让两个Broker中都有某个topic的信息，如果只有一个有，就没法做send的双broker负载均衡\"><a href=\"#怎么让两个Broker中都有某个topic的信息，如果只有一个有，就没法做send的双broker负载均衡\" class=\"headerlink\" title=\"怎么让两个Broker中都有某个topic的信息，如果只有一个有，就没法做send的双broker负载均衡\"></a>怎么让两个Broker中都有某个topic的信息，如果只有一个有，就没法做send的双broker负载均衡</h4><p>Client发送一个新的topic，在name server上是取不到信息的，所以先用在本地放上Map来缓存，那问题是Broker什么时候给name server发送创建Topic route info的请求？在checkMsg方法中，this.brokerController.registerBrokerAll(false, true);<br>MQ的消费者端如果是用push的方式回调，执行listener会开启新的线程用来接收和返回（确认）ack，但一般我们会再开我们的新线程去做消费的事情，这个时候如果由于外界原因进程死亡，那么这些消息就丢失了。</p>\n<h4 id=\"哪些情况会引起rebalance\"><a href=\"#哪些情况会引起rebalance\" class=\"headerlink\" title=\"哪些情况会引起rebalance?\"></a>哪些情况会引起rebalance?</h4><p>mq数量，客户端数量</p>\n<h4 id=\"怎么设计Netty的同步调用与异步调用？\"><a href=\"#怎么设计Netty的同步调用与异步调用？\" class=\"headerlink\" title=\"怎么设计Netty的同步调用与异步调用？\"></a>怎么设计Netty的同步调用与异步调用？</h4><p>掌握CountDownLatch和（限流）</p>\n<h4 id=\"万一NameServer都被重启过，那producer或者consumer调用getTopicRouteInfo，信息从何而来？\"><a href=\"#万一NameServer都被重启过，那producer或者consumer调用getTopicRouteInfo，信息从何而来？\" class=\"headerlink\" title=\"万一NameServer都被重启过，那producer或者consumer调用getTopicRouteInfo，信息从何而来？\"></a>万一NameServer都被重启过，那producer或者consumer调用getTopicRouteInfo，信息从何而来？</h4><ol>\n<li>UpdateRouteInfo应该会上传一个新的Topic的信息。</li>\n</ol>\n<h4 id=\"RocketMQ落盘是异步-定时的，还是就异步的？\"><a href=\"#RocketMQ落盘是异步-定时的，还是就异步的？\" class=\"headerlink\" title=\"RocketMQ落盘是异步+定时的，还是就异步的？\"></a>RocketMQ落盘是异步+定时的，还是就异步的？</h4><p>异步+定时，时间默认为500ms。</p>\n<p>Client向broker pull message 都是以一个一个queue为单位的。processQueueTable代表，这里面的queue正在源源不断向broker请求数据中。而broker的queue的数量是可能发生变化的，所以，要时常对processQueueTable进行必要的整理。</p>\n<p>一个Subscription对应一次rebalance调用，一般的情况是n个topic+1个Retry topic。每一次rebalance调用，都会对当前的topic分配broker中的MQ队列，如果分到n个，那个生成n个PullRequest。</p>\n<p>RebalanceServer生成 PullRequest 会调用PullMessageService 放入 PullRequest的pullRequestQueue中，PullMessageService从pullRequestQueue队列中take出PullRequest，异步调用Netty。当网络将数据传输回来时，调用PullCallback中的ConsumeMessageService，遍历所有原始消费，对每个消息，生成一个ConsumeRequest，开启多线程进行消费。消费时，返回值怎么处理？比如 Re-consume-later, success。客户端开启一个线程定时去更新Broker的consumerOffset。</p>\n<h4 id=\"为什么一旦有producer发送了消息，consumer会几乎无延迟得立刻收到消息？\"><a href=\"#为什么一旦有producer发送了消息，consumer会几乎无延迟得立刻收到消息？\" class=\"headerlink\" title=\"为什么一旦有producer发送了消息，consumer会几乎无延迟得立刻收到消息？\"></a>为什么一旦有producer发送了消息，consumer会几乎无延迟得立刻收到消息？</h4><p>首先网络层，和基于事件编程的Netty有关。跟网络有关，网络收到数据后，立刻进入回调代码。ReputService空轮询有关。</p>\n<p>技巧</p>\n<ol>\n<li>充分利用作者写好的单元测试，对原理的掌握会有帮助</li>\n<li>RocketMQ有太多的事情是用 （短时间）定时+唤醒 的方式异步执行的，想要更好得了解原理，最好把定时的时间改得大一点，这样多线程的调试会好做很多。</li>\n</ol>\n<p>未解决问题：</p>\n<h4 id=\"Broker里面的protectBroker是用来做什么的？\"><a href=\"#Broker里面的protectBroker是用来做什么的？\" class=\"headerlink\" title=\"Broker里面的protectBroker是用来做什么的？\"></a>Broker里面的protectBroker是用来做什么的？</h4><h4 id=\"CommitLog和ConsumerQueue这两个文件的读写是顺序的么？效率怎么样？\"><a href=\"#CommitLog和ConsumerQueue这两个文件的读写是顺序的么？效率怎么样？\" class=\"headerlink\" title=\"CommitLog和ConsumerQueue这两个文件的读写是顺序的么？效率怎么样？\"></a>CommitLog和ConsumerQueue这两个文件的读写是顺序的么？效率怎么样？</h4><h4 id=\"RocketMQ在哪几种情况下，可能会出现消息重复的问题？\"><a href=\"#RocketMQ在哪几种情况下，可能会出现消息重复的问题？\" class=\"headerlink\" title=\"RocketMQ在哪几种情况下，可能会出现消息重复的问题？\"></a>RocketMQ在哪几种情况下，可能会出现消息重复的问题？</h4><ol>\n<li>一个consume_group一开始订阅了*tag，之后加了具体的，会发生什么。</li>\n</ol>\n<h4 id=\"afka的发送消息性能非常高，常用于日志缓冲，是不是用「Oneway」的方式？不然producer发送请求，broker处理请求，producer接受响应，这三段的时间是无论如何都无法缩减的。\"><a href=\"#afka的发送消息性能非常高，常用于日志缓冲，是不是用「Oneway」的方式？不然producer发送请求，broker处理请求，producer接受响应，这三段的时间是无论如何都无法缩减的。\" class=\"headerlink\" title=\"afka的发送消息性能非常高，常用于日志缓冲，是不是用「Oneway」的方式？不然producer发送请求，broker处理请求，producer接受响应，这三段的时间是无论如何都无法缩减的。\"></a>afka的发送消息性能非常高，常用于日志缓冲，是不是用「Oneway」的方式？不然producer发送请求，broker处理请求，producer接受响应，这三段的时间是无论如何都无法缩减的。</h4><h4 id=\"RocketMQ的事务消息是什么？\"><a href=\"#RocketMQ的事务消息是什么？\" class=\"headerlink\" title=\"RocketMQ的事务消息是什么？\"></a>RocketMQ的事务消息是什么？</h4><p>看到一段描述很有趣，当发送了分布式事务消息时，如果Producer因为意外宕机，Broker会回调Producer Group的另一一台Producer来确认事务状态。</p>\n<ol>\n<li>Commit Log 中存储了所有的元信息，包含消息体，类似于 Mysql、Oracle 的 redolog，所以只要有 Commit<br>Log 在，Consume Queue 即使数据丢失，仍然可以恢复出来。怎么理解？</li>\n<li>在Broker的SendMessageProcessor中，主干线程中只做了一件事，那就是把最新的消息Append到CommitLog中，并且通知Flush线程去force() mmap。所以，构建ConsumeQueue，构建索引这些事情都是异步的，那好像也没有看到通知这些线程，究竟是在哪里通知的呢？ Dispatcher（调度器）ReputMessageService。</li>\n</ol>\n<h4 id=\"Debug形式启动Producer，Producer发送消息，断点停止后，Producer发送消息会超时失败3次，但此时如果松开断点，让他执行完，那消息是在CommitLog中呢，还是不在？\"><a href=\"#Debug形式启动Producer，Producer发送消息，断点停止后，Producer发送消息会超时失败3次，但此时如果松开断点，让他执行完，那消息是在CommitLog中呢，还是不在？\" class=\"headerlink\" title=\"Debug形式启动Producer，Producer发送消息，断点停止后，Producer发送消息会超时失败3次，但此时如果松开断点，让他执行完，那消息是在CommitLog中呢，还是不在？\"></a>Debug形式启动Producer，Producer发送消息，断点停止后，Producer发送消息会超时失败3次，但此时如果松开断点，让他执行完，那消息是在CommitLog中呢，还是不在？</h4><h4 id=\"MQ在关闭的时候，CommitLog的内容和ConsumeQueue的内容需要能对上号的，但万一异常关闭导致没有对上号，应该怎么处理？CheckPoint机制有没有用？\"><a href=\"#MQ在关闭的时候，CommitLog的内容和ConsumeQueue的内容需要能对上号的，但万一异常关闭导致没有对上号，应该怎么处理？CheckPoint机制有没有用？\" class=\"headerlink\" title=\"MQ在关闭的时候，CommitLog的内容和ConsumeQueue的内容需要能对上号的，但万一异常关闭导致没有对上号，应该怎么处理？CheckPoint机制有没有用？\"></a>MQ在关闭的时候，CommitLog的内容和ConsumeQueue的内容需要能对上号的，但万一异常关闭导致没有对上号，应该怎么处理？CheckPoint机制有没有用？</h4><h4 id=\"一个消息已经消费过了，能在控制台上选择进行重复投递么？\"><a href=\"#一个消息已经消费过了，能在控制台上选择进行重复投递么？\" class=\"headerlink\" title=\"一个消息已经消费过了，能在控制台上选择进行重复投递么？\"></a>一个消息已经消费过了，能在控制台上选择进行重复投递么？</h4><p>可以。</p>\n<h4 id=\"Page-Cache到底是个什么东西？\"><a href=\"#Page-Cache到底是个什么东西？\" class=\"headerlink\" title=\"Page Cache到底是个什么东西？\"></a>Page Cache到底是个什么东西？</h4><h4 id=\"对于不可读的Consume-Queue，Consumer-rebalance时会不会考虑到？\"><a href=\"#对于不可读的Consume-Queue，Consumer-rebalance时会不会考虑到？\" class=\"headerlink\" title=\"对于不可读的Consume Queue，Consumer rebalance时会不会考虑到？\"></a>对于不可读的Consume Queue，Consumer rebalance时会不会考虑到？</h4><p>如果没有考虑到，那不可读的队列也分给了Consumer，造成Consumer的浪费。看过源码了，没有问题。</p>\n<h4 id=\"topic中有readQ-writeQ-那topic本身的权限是用来做什么的？\"><a href=\"#topic中有readQ-writeQ-那topic本身的权限是用来做什么的？\" class=\"headerlink\" title=\"topic中有readQ, writeQ, 那topic本身的权限是用来做什么的？\"></a>topic中有readQ, writeQ, 那topic本身的权限是用来做什么的？</h4><h4 id=\"多个namesrv不一致问题\"><a href=\"#多个namesrv不一致问题\" class=\"headerlink\" title=\"多个namesrv不一致问题\"></a>多个namesrv不一致问题</h4><h4 id=\"如果某个topic的consume-queue上有数据，那设置可读可写队列为0后，数据是不是读不到了。（我知道不会丢失）\"><a href=\"#如果某个topic的consume-queue上有数据，那设置可读可写队列为0后，数据是不是读不到了。（我知道不会丢失）\" class=\"headerlink\" title=\"如果某个topic的consume queue上有数据，那设置可读可写队列为0后，数据是不是读不到了。（我知道不会丢失）\"></a>如果某个topic的consume queue上有数据，那设置可读可写队列为0后，数据是不是读不到了。（我知道不会丢失）</h4><h4 id=\"写Consume-queue完全是一个单线程DefaultMessageStore-ReputMessageService中，那就没有锁竞争了，一个Topic到底放多少个队列效率达到最高，是越少越好，还是越多越好？\"><a href=\"#写Consume-queue完全是一个单线程DefaultMessageStore-ReputMessageService中，那就没有锁竞争了，一个Topic到底放多少个队列效率达到最高，是越少越好，还是越多越好？\" class=\"headerlink\" title=\"写Consume queue完全是一个单线程DefaultMessageStore.ReputMessageService中，那就没有锁竞争了，一个Topic到底放多少个队列效率达到最高，是越少越好，还是越多越好？\"></a>写Consume queue完全是一个单线程DefaultMessageStore.ReputMessageService中，那就没有锁竞争了，一个Topic到底放多少个队列效率达到最高，是越少越好，还是越多越好？</h4><h4 id=\"namesrv是无状态的，可以随意部署，但Broker启动后怎么是怎么知道新增加的namesrv的？\"><a href=\"#namesrv是无状态的，可以随意部署，但Broker启动后怎么是怎么知道新增加的namesrv的？\" class=\"headerlink\" title=\"namesrv是无状态的，可以随意部署，但Broker启动后怎么是怎么知道新增加的namesrv的？\"></a>namesrv是无状态的，可以随意部署，但Broker启动后怎么是怎么知道新增加的namesrv的？</h4><h4 id=\"如果发送了某个topic的某个tag的消息，那订阅了该topic的consumer是有可能过滤掉该tag的信息的。那怎么样才能知道该消息是“订阅了，被过滤了”的状态呢？\"><a href=\"#如果发送了某个topic的某个tag的消息，那订阅了该topic的consumer是有可能过滤掉该tag的信息的。那怎么样才能知道该消息是“订阅了，被过滤了”的状态呢？\" class=\"headerlink\" title=\"如果发送了某个topic的某个tag的消息，那订阅了该topic的consumer是有可能过滤掉该tag的信息的。那怎么样才能知道该消息是“订阅了，被过滤了”的状态呢？\"></a>如果发送了某个topic的某个tag的消息，那订阅了该topic的consumer是有可能过滤掉该tag的信息的。那怎么样才能知道该消息是“订阅了，被过滤了”的状态呢？</h4><h4 id=\"ConsumerQueue文件删除了，能够复原么？原理\"><a href=\"#ConsumerQueue文件删除了，能够复原么？原理\" class=\"headerlink\" title=\"ConsumerQueue文件删除了，能够复原么？原理\"></a>ConsumerQueue文件删除了，能够复原么？原理</h4><h4 id=\"index-file删除了，能够复原么？原理\"><a href=\"#index-file删除了，能够复原么？原理\" class=\"headerlink\" title=\"index file删除了，能够复原么？原理\"></a>index file删除了，能够复原么？原理</h4><h4 id=\"ReputMessageService中空转监听是Commitog的offset，当有新的消息时，先是构建consume-queue，然后通知PullMessageHoldService，那整个过程在哪里对消息进行过滤，过滤用的是tag，consume-queue中也有tag的hash，是不是只需要对比这两个值就好？\"><a href=\"#ReputMessageService中空转监听是Commitog的offset，当有新的消息时，先是构建consume-queue，然后通知PullMessageHoldService，那整个过程在哪里对消息进行过滤，过滤用的是tag，consume-queue中也有tag的hash，是不是只需要对比这两个值就好？\" class=\"headerlink\" title=\"ReputMessageService中空转监听是Commitog的offset，当有新的消息时，先是构建consume queue，然后通知PullMessageHoldService，那整个过程在哪里对消息进行过滤，过滤用的是tag，consume queue中也有tag的hash，是不是只需要对比这两个值就好？\"></a>ReputMessageService中空转监听是Commitog的offset，当有新的消息时，先是构建consume queue，然后通知PullMessageHoldService，那整个过程在哪里对消息进行过滤，过滤用的是tag，consume queue中也有tag的hash，是不是只需要对比这两个值就好？</h4><ol>\n<li>如果一个4G的文件用mmap映射到Java的MappedByteBuffer中，是绝对不可能整体加载进内存的。一个ByteBuffer就是一个有限的byte数组，但是，我们理论上可以在这个数组的任何位置（position）对数组进行读和写，然后映射进文件。如果OS能预感到我们的文件是顺序读写的，那么内存到文件的速度会非常快，如果是随机的，OS没法预测下次的读写位置，这样速度会变慢（这部分去查询下）</li>\n<li>PullConsumer：用consumer.pull(MessageQueue mq, String subExpression, long offset, int maxNums)方法去获取Broker的消息，如果第一次offset传了0，获取到了数据，第二次还是传0，还是能获取到数据，是什么原因？Broker的consumerOffset.json为什么不起作用？Pull和Push消费到的点什么时候会被persist到config/consumerOffset.json?详见MQClientInstance.persistAllConsumerOffset会把offsetTable定时发到Broker。</li>\n</ol>\n<h4 id=\"程序中处理MappedByteBuffer要特别注意些什么？\"><a href=\"#程序中处理MappedByteBuffer要特别注意些什么？\" class=\"headerlink\" title=\"程序中处理MappedByteBuffer要特别注意些什么？\"></a>程序中处理MappedByteBuffer要特别注意些什么？</h4><p>A MemoryMappedBuffer has a fixed size, but the file it’s mapped to is elastic.所以一旦当前的程序（或者说当前的线程）对文件的内容失去了独占权，比如文件的内容被其它的线程改了，那原先的线程访问MappedByteBuffer对应位置的缓存就会抛出异常，所以，当我们要用MappedByteBuffer时，一定要确保在多线程下是互斥的。</p>\n<h4 id=\"RocketMQ发送，接受消息的性能与队列数量的关系。\"><a href=\"#RocketMQ发送，接受消息的性能与队列数量的关系。\" class=\"headerlink\" title=\"RocketMQ发送，接受消息的性能与队列数量的关系。\"></a>RocketMQ发送，接受消息的性能与队列数量的关系。</h4><p>可以查看kafka相关的信息。</p>\n<h4 id=\"如果让你设计一个消息中间件？你会怎么设计？\"><a href=\"#如果让你设计一个消息中间件？你会怎么设计？\" class=\"headerlink\" title=\"如果让你设计一个消息中间件？你会怎么设计？\"></a>如果让你设计一个消息中间件？你会怎么设计？</h4><h4 id=\"如果一个消息没有消费成功，会隔1s-5s-ns重新消费，这个是怎么实现的？\"><a href=\"#如果一个消息没有消费成功，会隔1s-5s-ns重新消费，这个是怎么实现的？\" class=\"headerlink\" title=\"如果一个消息没有消费成功，会隔1s,5s,ns重新消费，这个是怎么实现的？\"></a>如果一个消息没有消费成功，会隔1s,5s,ns重新消费，这个是怎么实现的？</h4><h4 id=\"构建IndexService是否可以做成异步？\"><a href=\"#构建IndexService是否可以做成异步？\" class=\"headerlink\" title=\"构建IndexService是否可以做成异步？\"></a>构建IndexService是否可以做成异步？</h4><p>因为它如果卡住，会影响长轮询，从而影响消息接收的实时性。</p>\n<h4 id=\"Netty线程问题\"><a href=\"#Netty线程问题\" class=\"headerlink\" title=\"Netty线程问题\"></a>Netty线程问题</h4><p>netty在触发channelRead0的时候，所用的线程是不是workEventLoopGroup所指定的线程<br>nettyClientWorkerThread</p>\n<h4 id=\"netty-eventLoopGroup-是什么？\"><a href=\"#netty-eventLoopGroup-是什么？\" class=\"headerlink\" title=\"netty eventLoopGroup 是什么？\"></a>netty eventLoopGroup 是什么？</h4><h4 id=\"网络端口映射\"><a href=\"#网络端口映射\" class=\"headerlink\" title=\"网络端口映射\"></a>网络端口映射</h4><p>Server:8080<br>curl ‘localhost:8080’<br>lsof -i:8080</p>\n<h4 id=\"待解决问题\"><a href=\"#待解决问题\" class=\"headerlink\" title=\"待解决问题\"></a>待解决问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.apache.rocketmq.client.exception.MQClientException: No route info of this topic, binlog-msg</div><div class=\"line\">See http://rocketmq.apache.org/docs/faq/ for further details.</div><div class=\"line\">\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(DefaultMQProducerImpl.java:537)</div><div class=\"line\">\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:1038)</div><div class=\"line\">\tat org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.send(DefaultMQProducerImpl.java:996)</div><div class=\"line\">\tat org.apache.rocketmq.client.producer.DefaultMQProducer.send(DefaultMQProducer.java:212)</div><div class=\"line\">\tat org.apache.rock</div></pre></td></tr></table></figure>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>2017-10-11 07:21:38 WARN SendMessageThread_1 - Offset for /root/store/commitlog/00000000002147483648 not matched. Request offset: 4051326754958557513, index: -521875234, mappedFileSize: 1073741824, mappedFiles count: 1<br>2017-10-11 07:21:38 WARN SendMessageThread_1 - findMappedFileByOffset failure.<br>java.lang.ArrayIndexOutOfBoundsException: -521875234</p>\n<p>请教：rocketmq的这个异常应该如何解决呢？</p>\n"},{"title":"RocketMQ——IndexService 原理分析","date":"2017-10-12T11:29:40.000Z","_content":"\n\n#### RocmetMQ的IndexService设计原理\n\n在RocketMQ中，IndexService底层是通过文件来存储的，所以，即使MQ的进程在中途重启过，索引的功能是不受影响的。\n索引文件的路径是 `System.getProperty(\"user.home\") + File.separator + \"store\"`，文件名是文件创建的时间，可以有多个，但，\n在一个文件没有满的情况下，所有的topic的所有的列队的消息，全部都是顺序得存放在一个文件中的，这很重要，下面会详解。\n![image.png](http://upload-images.jianshu.io/upload_images/716353-2ed415df19a3040b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n在MQ源码中，用IndexFile这个类代表索引文件，对于每一个index file，大小都是固定的，即，都是设计好的。\nindex file在逻辑上被拆分成了3个部分，IndexHead + HashSlotPart + MsgIndexPart，\nIndexHead\n索引的开头，和索引的结构没有关系\nHashSlotPart\nhash的槽位，是索引的目录，用于定位消息索引在该文件的「MsgIndexPart」的位置，\n可能有点绕，往下就会觉得很简单，每个槽位是等长的，占4 Byte，一个文件总的槽位数量也是定的，不可改变，槽位数越大，索引的消息越多。\nMsgIndexPart\n真实的消息索引，即，每个msgIndex段代表改消息在CommitLog上的PhyicOffset。每个msgIndex段也是等长的，占20 Byte（int + long + int + int）。\n等长的MsgIndexPart可以理解成功一个有capacity的数组，为了使数组的空间不浪费，那消息就要从前往后一个一个append进去。\n\n\n所以，在默认配置下，\n每个索引文件的大小为 \n`int fileTotalSize = IndexHeader.INDEX_HEADER_SIZE + (hashSlotNum * hashSlotSize) + (indexNum * indexSize);`\n\nCommitLogDispatcherBuildIndex调用dispatch\n``` java\npublic void dispatch(DispatchRequest request) {\n    if (DefaultMessageStore.this.messageStoreConfig.isMessageIndexEnable()) {\n        DefaultMessageStore.this.indexService.buildIndex(request);\n    }\n}\n```\nbuildIndex时会构建好几个索引，topic#msgId=>msgIndex, topic#key1=>msgIndex, topic#key2=>msgIndex\n``` java\npublic void buildIndex(DispatchRequest req) {\n    IndexFile indexFile = retryGetAndCreateIndexFile();\n    if (indexFile != null) {\n        long endPhyOffset = indexFile.getEndPhyOffset();\n        DispatchRequest msg = req;\n        String topic = msg.getTopic();\n        String keys = msg.getKeys();\n\n        ...\n        if (req.getUniqKey() != null) {\n            // 构建UniqKey，也就是msgId的索引\n            indexFile = putKey(indexFile, msg, buildKey(topic, req.getUniqKey()));\n            ...\n        }\n\n        if (keys != null && keys.length() > 0) {\n            String[] keyset = keys.split(MessageConst.KEY_SEPARATOR);\n            for (int i = 0; i < keyset.length; i++) {\n                String key = keyset[i];\n                if (key.length() > 0) {\n                    // 构建业务Key的索引\n                    indexFile = putKey(indexFile, msg, buildKey(topic, key));\n                    ...\n                }\n            }\n        }\n    } else {\n        log.error(\"build index error, stop building index\");\n    }\n}\n```","source":"_posts/RocketMQ-Index-service.md","raw":"---\ntitle: RocketMQ——IndexService 原理分析\ndate: 2017-10-12 19:29:40\ntags: RocketMQ\n---\n\n\n#### RocmetMQ的IndexService设计原理\n\n在RocketMQ中，IndexService底层是通过文件来存储的，所以，即使MQ的进程在中途重启过，索引的功能是不受影响的。\n索引文件的路径是 `System.getProperty(\"user.home\") + File.separator + \"store\"`，文件名是文件创建的时间，可以有多个，但，\n在一个文件没有满的情况下，所有的topic的所有的列队的消息，全部都是顺序得存放在一个文件中的，这很重要，下面会详解。\n![image.png](http://upload-images.jianshu.io/upload_images/716353-2ed415df19a3040b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n在MQ源码中，用IndexFile这个类代表索引文件，对于每一个index file，大小都是固定的，即，都是设计好的。\nindex file在逻辑上被拆分成了3个部分，IndexHead + HashSlotPart + MsgIndexPart，\nIndexHead\n索引的开头，和索引的结构没有关系\nHashSlotPart\nhash的槽位，是索引的目录，用于定位消息索引在该文件的「MsgIndexPart」的位置，\n可能有点绕，往下就会觉得很简单，每个槽位是等长的，占4 Byte，一个文件总的槽位数量也是定的，不可改变，槽位数越大，索引的消息越多。\nMsgIndexPart\n真实的消息索引，即，每个msgIndex段代表改消息在CommitLog上的PhyicOffset。每个msgIndex段也是等长的，占20 Byte（int + long + int + int）。\n等长的MsgIndexPart可以理解成功一个有capacity的数组，为了使数组的空间不浪费，那消息就要从前往后一个一个append进去。\n\n\n所以，在默认配置下，\n每个索引文件的大小为 \n`int fileTotalSize = IndexHeader.INDEX_HEADER_SIZE + (hashSlotNum * hashSlotSize) + (indexNum * indexSize);`\n\nCommitLogDispatcherBuildIndex调用dispatch\n``` java\npublic void dispatch(DispatchRequest request) {\n    if (DefaultMessageStore.this.messageStoreConfig.isMessageIndexEnable()) {\n        DefaultMessageStore.this.indexService.buildIndex(request);\n    }\n}\n```\nbuildIndex时会构建好几个索引，topic#msgId=>msgIndex, topic#key1=>msgIndex, topic#key2=>msgIndex\n``` java\npublic void buildIndex(DispatchRequest req) {\n    IndexFile indexFile = retryGetAndCreateIndexFile();\n    if (indexFile != null) {\n        long endPhyOffset = indexFile.getEndPhyOffset();\n        DispatchRequest msg = req;\n        String topic = msg.getTopic();\n        String keys = msg.getKeys();\n\n        ...\n        if (req.getUniqKey() != null) {\n            // 构建UniqKey，也就是msgId的索引\n            indexFile = putKey(indexFile, msg, buildKey(topic, req.getUniqKey()));\n            ...\n        }\n\n        if (keys != null && keys.length() > 0) {\n            String[] keyset = keys.split(MessageConst.KEY_SEPARATOR);\n            for (int i = 0; i < keyset.length; i++) {\n                String key = keyset[i];\n                if (key.length() > 0) {\n                    // 构建业务Key的索引\n                    indexFile = putKey(indexFile, msg, buildKey(topic, key));\n                    ...\n                }\n            }\n        }\n    } else {\n        log.error(\"build index error, stop building index\");\n    }\n}\n```","slug":"RocketMQ-Index-service","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hsj000wxjq2sxylxvrj","content":"<h4 id=\"RocmetMQ的IndexService设计原理\"><a href=\"#RocmetMQ的IndexService设计原理\" class=\"headerlink\" title=\"RocmetMQ的IndexService设计原理\"></a>RocmetMQ的IndexService设计原理</h4><p>在RocketMQ中，IndexService底层是通过文件来存储的，所以，即使MQ的进程在中途重启过，索引的功能是不受影响的。<br>索引文件的路径是 <code>System.getProperty(&quot;user.home&quot;) + File.separator + &quot;store&quot;</code>，文件名是文件创建的时间，可以有多个，但，<br>在一个文件没有满的情况下，所有的topic的所有的列队的消息，全部都是顺序得存放在一个文件中的，这很重要，下面会详解。<br><img src=\"http://upload-images.jianshu.io/upload_images/716353-2ed415df19a3040b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>在MQ源码中，用IndexFile这个类代表索引文件，对于每一个index file，大小都是固定的，即，都是设计好的。<br>index file在逻辑上被拆分成了3个部分，IndexHead + HashSlotPart + MsgIndexPart，<br>IndexHead<br>索引的开头，和索引的结构没有关系<br>HashSlotPart<br>hash的槽位，是索引的目录，用于定位消息索引在该文件的「MsgIndexPart」的位置，<br>可能有点绕，往下就会觉得很简单，每个槽位是等长的，占4 Byte，一个文件总的槽位数量也是定的，不可改变，槽位数越大，索引的消息越多。<br>MsgIndexPart<br>真实的消息索引，即，每个msgIndex段代表改消息在CommitLog上的PhyicOffset。每个msgIndex段也是等长的，占20 Byte（int + long + int + int）。<br>等长的MsgIndexPart可以理解成功一个有capacity的数组，为了使数组的空间不浪费，那消息就要从前往后一个一个append进去。</p>\n<p>所以，在默认配置下，<br>每个索引文件的大小为<br><code>int fileTotalSize = IndexHeader.INDEX_HEADER_SIZE + (hashSlotNum * hashSlotSize) + (indexNum * indexSize);</code></p>\n<p>CommitLogDispatcherBuildIndex调用dispatch<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatch</span><span class=\"params\">(DispatchRequest request)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (DefaultMessageStore.<span class=\"keyword\">this</span>.messageStoreConfig.isMessageIndexEnable()) &#123;</div><div class=\"line\">        DefaultMessageStore.<span class=\"keyword\">this</span>.indexService.buildIndex(request);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>buildIndex时会构建好几个索引，topic#msgId=&gt;msgIndex, topic#key1=&gt;msgIndex, topic#key2=&gt;msgIndex<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildIndex</span><span class=\"params\">(DispatchRequest req)</span> </span>&#123;</div><div class=\"line\">    IndexFile indexFile = retryGetAndCreateIndexFile();</div><div class=\"line\">    <span class=\"keyword\">if</span> (indexFile != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> endPhyOffset = indexFile.getEndPhyOffset();</div><div class=\"line\">        DispatchRequest msg = req;</div><div class=\"line\">        String topic = msg.getTopic();</div><div class=\"line\">        String keys = msg.getKeys();</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (req.getUniqKey() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 构建UniqKey，也就是msgId的索引</span></div><div class=\"line\">            indexFile = putKey(indexFile, msg, buildKey(topic, req.getUniqKey()));</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (keys != <span class=\"keyword\">null</span> &amp;&amp; keys.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            String[] keyset = keys.split(MessageConst.KEY_SEPARATOR);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; keyset.length; i++) &#123;</div><div class=\"line\">                String key = keyset[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (key.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 构建业务Key的索引</span></div><div class=\"line\">                    indexFile = putKey(indexFile, msg, buildKey(topic, key));</div><div class=\"line\">                    ...</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        log.error(<span class=\"string\">\"build index error, stop building index\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"RocmetMQ的IndexService设计原理\"><a href=\"#RocmetMQ的IndexService设计原理\" class=\"headerlink\" title=\"RocmetMQ的IndexService设计原理\"></a>RocmetMQ的IndexService设计原理</h4><p>在RocketMQ中，IndexService底层是通过文件来存储的，所以，即使MQ的进程在中途重启过，索引的功能是不受影响的。<br>索引文件的路径是 <code>System.getProperty(&quot;user.home&quot;) + File.separator + &quot;store&quot;</code>，文件名是文件创建的时间，可以有多个，但，<br>在一个文件没有满的情况下，所有的topic的所有的列队的消息，全部都是顺序得存放在一个文件中的，这很重要，下面会详解。<br><img src=\"http://upload-images.jianshu.io/upload_images/716353-2ed415df19a3040b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>在MQ源码中，用IndexFile这个类代表索引文件，对于每一个index file，大小都是固定的，即，都是设计好的。<br>index file在逻辑上被拆分成了3个部分，IndexHead + HashSlotPart + MsgIndexPart，<br>IndexHead<br>索引的开头，和索引的结构没有关系<br>HashSlotPart<br>hash的槽位，是索引的目录，用于定位消息索引在该文件的「MsgIndexPart」的位置，<br>可能有点绕，往下就会觉得很简单，每个槽位是等长的，占4 Byte，一个文件总的槽位数量也是定的，不可改变，槽位数越大，索引的消息越多。<br>MsgIndexPart<br>真实的消息索引，即，每个msgIndex段代表改消息在CommitLog上的PhyicOffset。每个msgIndex段也是等长的，占20 Byte（int + long + int + int）。<br>等长的MsgIndexPart可以理解成功一个有capacity的数组，为了使数组的空间不浪费，那消息就要从前往后一个一个append进去。</p>\n<p>所以，在默认配置下，<br>每个索引文件的大小为<br><code>int fileTotalSize = IndexHeader.INDEX_HEADER_SIZE + (hashSlotNum * hashSlotSize) + (indexNum * indexSize);</code></p>\n<p>CommitLogDispatcherBuildIndex调用dispatch<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatch</span><span class=\"params\">(DispatchRequest request)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (DefaultMessageStore.<span class=\"keyword\">this</span>.messageStoreConfig.isMessageIndexEnable()) &#123;</div><div class=\"line\">        DefaultMessageStore.<span class=\"keyword\">this</span>.indexService.buildIndex(request);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>buildIndex时会构建好几个索引，topic#msgId=&gt;msgIndex, topic#key1=&gt;msgIndex, topic#key2=&gt;msgIndex<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildIndex</span><span class=\"params\">(DispatchRequest req)</span> </span>&#123;</div><div class=\"line\">    IndexFile indexFile = retryGetAndCreateIndexFile();</div><div class=\"line\">    <span class=\"keyword\">if</span> (indexFile != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> endPhyOffset = indexFile.getEndPhyOffset();</div><div class=\"line\">        DispatchRequest msg = req;</div><div class=\"line\">        String topic = msg.getTopic();</div><div class=\"line\">        String keys = msg.getKeys();</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (req.getUniqKey() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 构建UniqKey，也就是msgId的索引</span></div><div class=\"line\">            indexFile = putKey(indexFile, msg, buildKey(topic, req.getUniqKey()));</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (keys != <span class=\"keyword\">null</span> &amp;&amp; keys.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            String[] keyset = keys.split(MessageConst.KEY_SEPARATOR);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; keyset.length; i++) &#123;</div><div class=\"line\">                String key = keyset[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (key.length() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 构建业务Key的索引</span></div><div class=\"line\">                    indexFile = putKey(indexFile, msg, buildKey(topic, key));</div><div class=\"line\">                    ...</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        log.error(<span class=\"string\">\"build index error, stop building index\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"RocketMQ——Broker的主从复制原理分析（双写机制）","date":"2017-10-12T08:28:24.000Z","_content":"\n``` java\n\n```\n![](https://ws3.sinaimg.cn/large/006tNbRwgy1fkfij3xtx8j31kw1514e0.jpg)","source":"_posts/RocketMQ-Master-slave-high-availability.md","raw":"---\ntitle: RocketMQ——Broker的主从复制原理分析（双写机制）\ndate: 2017-10-12 16:28:24\ntags: RocketMQ\n---\n\n``` java\n\n```\n![](https://ws3.sinaimg.cn/large/006tNbRwgy1fkfij3xtx8j31kw1514e0.jpg)","slug":"RocketMQ-Master-slave-high-availability","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hsq000yxjq2uc1u9u9w","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fkfij3xtx8j31kw1514e0.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fkfij3xtx8j31kw1514e0.jpg\" alt=\"\"></p>\n"},{"title":"RocketMQ——高性能秘籍之刷盘机制","date":"2017-09-19T10:47:17.000Z","_content":"\n### 逻辑Offset队列: ConsumerQueue\n\n\n### 物理Offset队列: CommitLog\n\n### MappedByteBuffer\n操纵MappedByteBuffer的线程或者进程必须对某一个文件的映射Buffer有独占权，\n在设计上，消息的顺序是由CommitLog决定，所以CommitLog在Append新的消息时，必须上锁进行互斥。\n\n*传统的synchronized叫做monitor lock，当一个线程进入了synchronized的代码块时，我们说，该线程own（拥有）了monitor lock。这种锁是一种重量级锁，用mutual exclusive（互斥）的特性来实现了同步的需求。\n*自旋锁，JDK1.6引进，我们知道，线程状态与状态的切换，是需要内核参与的，简单点来讲，这个过程是需要点时间的。线程B已经own了一个锁，这是线程A去尝试获取锁，本来线程A应该要挂起，JVM不让它挂起，让A在那里做自旋操作，JVM要赌当前持有锁的B会很快释放锁。如果线程B确实很快释放了锁，那对于A来讲是一个非常好事情，因为A可以不用切换状态，立刻持有锁。那什么时候会用到呢？http://blog.csdn.net/u013080921/article/details/42676231\n\n#### Spin Lock(自旋锁)\n\n#### ReentrantLock(重入锁)\n\n","source":"_posts/RocketMQ-Message-flush-stategy.md","raw":"---\ntitle: RocketMQ——高性能秘籍之刷盘机制\ndate: 2017-09-19 18:47:17\ntags: RocketMQ\n---\n\n### 逻辑Offset队列: ConsumerQueue\n\n\n### 物理Offset队列: CommitLog\n\n### MappedByteBuffer\n操纵MappedByteBuffer的线程或者进程必须对某一个文件的映射Buffer有独占权，\n在设计上，消息的顺序是由CommitLog决定，所以CommitLog在Append新的消息时，必须上锁进行互斥。\n\n*传统的synchronized叫做monitor lock，当一个线程进入了synchronized的代码块时，我们说，该线程own（拥有）了monitor lock。这种锁是一种重量级锁，用mutual exclusive（互斥）的特性来实现了同步的需求。\n*自旋锁，JDK1.6引进，我们知道，线程状态与状态的切换，是需要内核参与的，简单点来讲，这个过程是需要点时间的。线程B已经own了一个锁，这是线程A去尝试获取锁，本来线程A应该要挂起，JVM不让它挂起，让A在那里做自旋操作，JVM要赌当前持有锁的B会很快释放锁。如果线程B确实很快释放了锁，那对于A来讲是一个非常好事情，因为A可以不用切换状态，立刻持有锁。那什么时候会用到呢？http://blog.csdn.net/u013080921/article/details/42676231\n\n#### Spin Lock(自旋锁)\n\n#### ReentrantLock(重入锁)\n\n","slug":"RocketMQ-Message-flush-stategy","published":1,"updated":"2017-10-18T02:49:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hsu0010xjq2nmpmcm0l","content":"<h3 id=\"逻辑Offset队列-ConsumerQueue\"><a href=\"#逻辑Offset队列-ConsumerQueue\" class=\"headerlink\" title=\"逻辑Offset队列: ConsumerQueue\"></a>逻辑Offset队列: ConsumerQueue</h3><h3 id=\"物理Offset队列-CommitLog\"><a href=\"#物理Offset队列-CommitLog\" class=\"headerlink\" title=\"物理Offset队列: CommitLog\"></a>物理Offset队列: CommitLog</h3><h3 id=\"MappedByteBuffer\"><a href=\"#MappedByteBuffer\" class=\"headerlink\" title=\"MappedByteBuffer\"></a>MappedByteBuffer</h3><p>操纵MappedByteBuffer的线程或者进程必须对某一个文件的映射Buffer有独占权，<br>在设计上，消息的顺序是由CommitLog决定，所以CommitLog在Append新的消息时，必须上锁进行互斥。</p>\n<p><em>传统的synchronized叫做monitor lock，当一个线程进入了synchronized的代码块时，我们说，该线程own（拥有）了monitor lock。这种锁是一种重量级锁，用mutual exclusive（互斥）的特性来实现了同步的需求。\n</em>自旋锁，JDK1.6引进，我们知道，线程状态与状态的切换，是需要内核参与的，简单点来讲，这个过程是需要点时间的。线程B已经own了一个锁，这是线程A去尝试获取锁，本来线程A应该要挂起，JVM不让它挂起，让A在那里做自旋操作，JVM要赌当前持有锁的B会很快释放锁。如果线程B确实很快释放了锁，那对于A来讲是一个非常好事情，因为A可以不用切换状态，立刻持有锁。那什么时候会用到呢？<a href=\"http://blog.csdn.net/u013080921/article/details/42676231\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u013080921/article/details/42676231</a></p>\n<h4 id=\"Spin-Lock-自旋锁\"><a href=\"#Spin-Lock-自旋锁\" class=\"headerlink\" title=\"Spin Lock(自旋锁)\"></a>Spin Lock(自旋锁)</h4><h4 id=\"ReentrantLock-重入锁\"><a href=\"#ReentrantLock-重入锁\" class=\"headerlink\" title=\"ReentrantLock(重入锁)\"></a>ReentrantLock(重入锁)</h4>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"逻辑Offset队列-ConsumerQueue\"><a href=\"#逻辑Offset队列-ConsumerQueue\" class=\"headerlink\" title=\"逻辑Offset队列: ConsumerQueue\"></a>逻辑Offset队列: ConsumerQueue</h3><h3 id=\"物理Offset队列-CommitLog\"><a href=\"#物理Offset队列-CommitLog\" class=\"headerlink\" title=\"物理Offset队列: CommitLog\"></a>物理Offset队列: CommitLog</h3><h3 id=\"MappedByteBuffer\"><a href=\"#MappedByteBuffer\" class=\"headerlink\" title=\"MappedByteBuffer\"></a>MappedByteBuffer</h3><p>操纵MappedByteBuffer的线程或者进程必须对某一个文件的映射Buffer有独占权，<br>在设计上，消息的顺序是由CommitLog决定，所以CommitLog在Append新的消息时，必须上锁进行互斥。</p>\n<p><em>传统的synchronized叫做monitor lock，当一个线程进入了synchronized的代码块时，我们说，该线程own（拥有）了monitor lock。这种锁是一种重量级锁，用mutual exclusive（互斥）的特性来实现了同步的需求。\n</em>自旋锁，JDK1.6引进，我们知道，线程状态与状态的切换，是需要内核参与的，简单点来讲，这个过程是需要点时间的。线程B已经own了一个锁，这是线程A去尝试获取锁，本来线程A应该要挂起，JVM不让它挂起，让A在那里做自旋操作，JVM要赌当前持有锁的B会很快释放锁。如果线程B确实很快释放了锁，那对于A来讲是一个非常好事情，因为A可以不用切换状态，立刻持有锁。那什么时候会用到呢？<a href=\"http://blog.csdn.net/u013080921/article/details/42676231\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u013080921/article/details/42676231</a></p>\n<h4 id=\"Spin-Lock-自旋锁\"><a href=\"#Spin-Lock-自旋锁\" class=\"headerlink\" title=\"Spin Lock(自旋锁)\"></a>Spin Lock(自旋锁)</h4><h4 id=\"ReentrantLock-重入锁\"><a href=\"#ReentrantLock-重入锁\" class=\"headerlink\" title=\"ReentrantLock(重入锁)\"></a>ReentrantLock(重入锁)</h4>"},{"title":"RocketMQ——Netty实现的远程同步与异步调用（二）","date":"2017-08-21T04:36:42.000Z","_content":"\n### Netty IO框架\nnetty是一个异步IO框架，异步API最大的特点就是基于事件，netty当然也不例外。\n\n### Remote同步调用\n![你想输入的替代文字](RocketMQ-Netty-imp-sync-and-async-invoke/invokeSync.png)\n\n### Remote异步调用\n异步调用不会使Caller线程等待，理论上可以在短时间内不限次数得调用，这将对系统造成非常大压力，所以在异步调用设计中引入了限流机制\n![你想输入的替代文字](RocketMQ-Netty-imp-sync-and-async-invoke/invokeAsync.png)\n\n###","source":"_posts/RocketMQ-Netty-imp-sync-and-async-invoke.md","raw":"---\ntitle: RocketMQ——Netty实现的远程同步与异步调用（二）\ndate: 2017-08-21 12:36:42\ntags: RocketMQ\n---\n\n### Netty IO框架\nnetty是一个异步IO框架，异步API最大的特点就是基于事件，netty当然也不例外。\n\n### Remote同步调用\n![你想输入的替代文字](RocketMQ-Netty-imp-sync-and-async-invoke/invokeSync.png)\n\n### Remote异步调用\n异步调用不会使Caller线程等待，理论上可以在短时间内不限次数得调用，这将对系统造成非常大压力，所以在异步调用设计中引入了限流机制\n![你想输入的替代文字](RocketMQ-Netty-imp-sync-and-async-invoke/invokeAsync.png)\n\n###","slug":"RocketMQ-Netty-imp-sync-and-async-invoke","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hu60013xjq2fxwvm2zf","content":"<h3 id=\"Netty-IO框架\"><a href=\"#Netty-IO框架\" class=\"headerlink\" title=\"Netty IO框架\"></a>Netty IO框架</h3><p>netty是一个异步IO框架，异步API最大的特点就是基于事件，netty当然也不例外。</p>\n<h3 id=\"Remote同步调用\"><a href=\"#Remote同步调用\" class=\"headerlink\" title=\"Remote同步调用\"></a>Remote同步调用</h3><p><img src=\"/2017/08/21/RocketMQ-Netty-imp-sync-and-async-invoke/invokeSync.png\" alt=\"你想输入的替代文字\"></p>\n<h3 id=\"Remote异步调用\"><a href=\"#Remote异步调用\" class=\"headerlink\" title=\"Remote异步调用\"></a>Remote异步调用</h3><p>异步调用不会使Caller线程等待，理论上可以在短时间内不限次数得调用，这将对系统造成非常大压力，所以在异步调用设计中引入了限流机制<br><img src=\"/2017/08/21/RocketMQ-Netty-imp-sync-and-async-invoke/invokeAsync.png\" alt=\"你想输入的替代文字\"></p>\n<p>###</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Netty-IO框架\"><a href=\"#Netty-IO框架\" class=\"headerlink\" title=\"Netty IO框架\"></a>Netty IO框架</h3><p>netty是一个异步IO框架，异步API最大的特点就是基于事件，netty当然也不例外。</p>\n<h3 id=\"Remote同步调用\"><a href=\"#Remote同步调用\" class=\"headerlink\" title=\"Remote同步调用\"></a>Remote同步调用</h3><p><img src=\"/2017/08/21/RocketMQ-Netty-imp-sync-and-async-invoke/invokeSync.png\" alt=\"你想输入的替代文字\"></p>\n<h3 id=\"Remote异步调用\"><a href=\"#Remote异步调用\" class=\"headerlink\" title=\"Remote异步调用\"></a>Remote异步调用</h3><p>异步调用不会使Caller线程等待，理论上可以在短时间内不限次数得调用，这将对系统造成非常大压力，所以在异步调用设计中引入了限流机制<br><img src=\"/2017/08/21/RocketMQ-Netty-imp-sync-and-async-invoke/invokeAsync.png\" alt=\"你想输入的替代文字\"></p>\n<p>###</p>\n"},{"title":"RocketMQ——Producer Balance 原理分析","date":"2017-10-12T11:45:09.000Z","_content":"","source":"_posts/RocketMQ-Producer-balance.md","raw":"---\ntitle: RocketMQ——Producer Balance 原理分析\ndate: 2017-10-12 19:45:09\ntags: RocketMQ\n---\n","slug":"RocketMQ-Producer-balance","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hxd0015xjq2tx6rqbm0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"RocketMQ——高性能PullRequest秘籍之长轮询(长轮询)原理分析","date":"2017-09-19T08:58:52.000Z","_content":"\n\n分成两部分，Client和Broker\n\n### Client: \n\n### Broker:\n首先PullMessageProcessor用相应的线程池调用processRequest，去ConsumerQueue中找消息，\n如果找到了，没有什么好说的，直接用Netty模块将数据写进相应的channel，客户端获取到了数据后进行并行消费；\n如果没有消息，那么将当前的pullRequest放入PullRequestHoldService的pullRequestTable进行suspend。\n``` java \ncase ResponseCode.PULL_NOT_FOUND:\n    if (brokerAllowSuspend && hasSuspendFlag) {\n        long pollingTimeMills = suspendTimeoutMillisLong;\n        if (!this.brokerController.getBrokerConfig().isLongPollingEnable()) {\n            pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills();\n        }\n\n        String topic = requestHeader.getTopic();\n        long offset = requestHeader.getQueueOffset();\n        int queueId = requestHeader.getQueueId();\n        PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills,\n            this.brokerController.getMessageStore().now(), offset, subscriptionData, messageFilter);\n        this.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);\n        // 此处将repsonse设置为null，remote-server将不会给对应的channel发送响应信息。那响应的信息何时发送，有两种情况：\n        // 1. PullRequestHoldService hold了足够的时间后\n        // 2. 有新的信息被发送至队列后\n        response = null;\n        break;\n    }\n```\n那么，消息刷入CommitLog后，怎么样让这个Hold住的PullRequest感知到消息的到来？\n答案是，DefaultMessageStore.ReputMessageService线程。\nReputMessageService开启时就进行了一个近实时的空循环，\n``` java\nwhile (!this.isStopped()) {\n    try {\n        Thread.sleep(1);\n        this.doReput();\n    } catch (Exception e) {\n        DefaultMessageStore.log.warn(this.getServiceName() + \" service has exception. \", e);\n    }\n}\n```\n检测CommitLog中的MaxOffset是否在变大，变大了说明有新的消息已经存进了CommitLog，紧接着构建一个dispatchRequest，再让DefaultMessageStore调用doDispatch(dispatchRequest)，\n该方法并没有开启新的线程，一个做了几件事情，\n第一，将新的消息刷入consumerQueue，最小2页，作用也非常明显，到时候要获取一个消息，consumerQueue可以用logicOffset定位到CommitLog的PhyicOffset，是一个无法或缺的索引，\n第二，将新的消息写入index file用于后续更加复杂的查询，\n第三，计算bitmap。当doDispatch顺利执行完后。\n\n重点来了，之后触发messageArrivingListener的arriving方法，让pullRequestHoldService调用notifyMessageArriving，\n开启新的线程再一次让PullMessageProcessor调用processRequest来处理原来的那个pullRequest，但此时由于consumerQueue已经构建好了，所以会正常获取到消息，正常用netty模块进行一个对client的应答。\n``` java\n// 用一个接近空轮询\nprivate void doReput() {\n    for (boolean doNext = true; this.isCommitLogAvailable() && doNext; ) {\n        ...\n        SelectMappedBufferResult result = DefaultMessageStore.this.commitLog.getData(reputFromOffset);\n        ...\n        this.reputFromOffset = result.getStartOffset();\n\n        for (int readSize = 0; readSize < result.getSize() && doNext; ) {\n            DispatchRequest dispatchRequest =\n                DefaultMessageStore.this.commitLog.checkMessageAndReturnSize(result.getByteBuffer(), false, false);\n            int size = dispatchRequest.getMsgSize();\n            ...\n            if (size > 0) {\n                // dispatch到构建consumerQueue和index file的调度器中\n                DefaultMessageStore.this.doDispatch(dispatchRequest);\n                \n                if (BrokerRole.SLAVE != DefaultMessageStore.this.getMessageStoreConfig().getBrokerRole()\n                    && DefaultMessageStore.this.brokerConfig.isLongPollingEnable()) {\n                    // 通知suspend pullRequest的PullRequestHoldService解除对pullRequest的hold\n                    DefaultMessageStore.this.messageArrivingListener.arriving(dispatchRequest.getTopic(),\n                        dispatchRequest.getQueueId(), dispatchRequest.getConsumeQueueOffset() + 1,\n                        dispatchRequest.getTagsCode(), dispatchRequest.getStoreTimestamp(),\n                        dispatchRequest.getBitMap(), dispatchRequest.getPropertiesMap());\n                }\n\n            } \n            ...\n        }\n    }\n}\n```\n\n整个过程时序图\n\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fkeelo8oxpj30za0g2adr.jpg)\n","source":"_posts/RocketMQ-Pull-message-with-long-polling.md","raw":"---\ntitle: RocketMQ——高性能PullRequest秘籍之长轮询(长轮询)原理分析\ndate: 2017-09-19 16:58:52\ntags: RocketMQ\n---\n\n\n分成两部分，Client和Broker\n\n### Client: \n\n### Broker:\n首先PullMessageProcessor用相应的线程池调用processRequest，去ConsumerQueue中找消息，\n如果找到了，没有什么好说的，直接用Netty模块将数据写进相应的channel，客户端获取到了数据后进行并行消费；\n如果没有消息，那么将当前的pullRequest放入PullRequestHoldService的pullRequestTable进行suspend。\n``` java \ncase ResponseCode.PULL_NOT_FOUND:\n    if (brokerAllowSuspend && hasSuspendFlag) {\n        long pollingTimeMills = suspendTimeoutMillisLong;\n        if (!this.brokerController.getBrokerConfig().isLongPollingEnable()) {\n            pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills();\n        }\n\n        String topic = requestHeader.getTopic();\n        long offset = requestHeader.getQueueOffset();\n        int queueId = requestHeader.getQueueId();\n        PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills,\n            this.brokerController.getMessageStore().now(), offset, subscriptionData, messageFilter);\n        this.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);\n        // 此处将repsonse设置为null，remote-server将不会给对应的channel发送响应信息。那响应的信息何时发送，有两种情况：\n        // 1. PullRequestHoldService hold了足够的时间后\n        // 2. 有新的信息被发送至队列后\n        response = null;\n        break;\n    }\n```\n那么，消息刷入CommitLog后，怎么样让这个Hold住的PullRequest感知到消息的到来？\n答案是，DefaultMessageStore.ReputMessageService线程。\nReputMessageService开启时就进行了一个近实时的空循环，\n``` java\nwhile (!this.isStopped()) {\n    try {\n        Thread.sleep(1);\n        this.doReput();\n    } catch (Exception e) {\n        DefaultMessageStore.log.warn(this.getServiceName() + \" service has exception. \", e);\n    }\n}\n```\n检测CommitLog中的MaxOffset是否在变大，变大了说明有新的消息已经存进了CommitLog，紧接着构建一个dispatchRequest，再让DefaultMessageStore调用doDispatch(dispatchRequest)，\n该方法并没有开启新的线程，一个做了几件事情，\n第一，将新的消息刷入consumerQueue，最小2页，作用也非常明显，到时候要获取一个消息，consumerQueue可以用logicOffset定位到CommitLog的PhyicOffset，是一个无法或缺的索引，\n第二，将新的消息写入index file用于后续更加复杂的查询，\n第三，计算bitmap。当doDispatch顺利执行完后。\n\n重点来了，之后触发messageArrivingListener的arriving方法，让pullRequestHoldService调用notifyMessageArriving，\n开启新的线程再一次让PullMessageProcessor调用processRequest来处理原来的那个pullRequest，但此时由于consumerQueue已经构建好了，所以会正常获取到消息，正常用netty模块进行一个对client的应答。\n``` java\n// 用一个接近空轮询\nprivate void doReput() {\n    for (boolean doNext = true; this.isCommitLogAvailable() && doNext; ) {\n        ...\n        SelectMappedBufferResult result = DefaultMessageStore.this.commitLog.getData(reputFromOffset);\n        ...\n        this.reputFromOffset = result.getStartOffset();\n\n        for (int readSize = 0; readSize < result.getSize() && doNext; ) {\n            DispatchRequest dispatchRequest =\n                DefaultMessageStore.this.commitLog.checkMessageAndReturnSize(result.getByteBuffer(), false, false);\n            int size = dispatchRequest.getMsgSize();\n            ...\n            if (size > 0) {\n                // dispatch到构建consumerQueue和index file的调度器中\n                DefaultMessageStore.this.doDispatch(dispatchRequest);\n                \n                if (BrokerRole.SLAVE != DefaultMessageStore.this.getMessageStoreConfig().getBrokerRole()\n                    && DefaultMessageStore.this.brokerConfig.isLongPollingEnable()) {\n                    // 通知suspend pullRequest的PullRequestHoldService解除对pullRequest的hold\n                    DefaultMessageStore.this.messageArrivingListener.arriving(dispatchRequest.getTopic(),\n                        dispatchRequest.getQueueId(), dispatchRequest.getConsumeQueueOffset() + 1,\n                        dispatchRequest.getTagsCode(), dispatchRequest.getStoreTimestamp(),\n                        dispatchRequest.getBitMap(), dispatchRequest.getPropertiesMap());\n                }\n\n            } \n            ...\n        }\n    }\n}\n```\n\n整个过程时序图\n\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1fkeelo8oxpj30za0g2adr.jpg)\n","slug":"RocketMQ-Pull-message-with-long-polling","published":1,"updated":"2017-10-18T02:55:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hxg0018xjq2o3o6gbte","content":"<p>分成两部分，Client和Broker</p>\n<h3 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client:\"></a>Client:</h3><h3 id=\"Broker\"><a href=\"#Broker\" class=\"headerlink\" title=\"Broker:\"></a>Broker:</h3><p>首先PullMessageProcessor用相应的线程池调用processRequest，去ConsumerQueue中找消息，<br>如果找到了，没有什么好说的，直接用Netty模块将数据写进相应的channel，客户端获取到了数据后进行并行消费；<br>如果没有消息，那么将当前的pullRequest放入PullRequestHoldService的pullRequestTable进行suspend。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> ResponseCode.PULL_NOT_FOUND:</div><div class=\"line\">    <span class=\"keyword\">if</span> (brokerAllowSuspend &amp;&amp; hasSuspendFlag) &#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> pollingTimeMills = suspendTimeoutMillisLong;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.brokerController.getBrokerConfig().isLongPollingEnable()) &#123;</div><div class=\"line\">            pollingTimeMills = <span class=\"keyword\">this</span>.brokerController.getBrokerConfig().getShortPollingTimeMills();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        String topic = requestHeader.getTopic();</div><div class=\"line\">        <span class=\"keyword\">long</span> offset = requestHeader.getQueueOffset();</div><div class=\"line\">        <span class=\"keyword\">int</span> queueId = requestHeader.getQueueId();</div><div class=\"line\">        PullRequest pullRequest = <span class=\"keyword\">new</span> PullRequest(request, channel, pollingTimeMills,</div><div class=\"line\">            <span class=\"keyword\">this</span>.brokerController.getMessageStore().now(), offset, subscriptionData, messageFilter);</div><div class=\"line\">        <span class=\"keyword\">this</span>.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);</div><div class=\"line\">        <span class=\"comment\">// 此处将repsonse设置为null，remote-server将不会给对应的channel发送响应信息。那响应的信息何时发送，有两种情况：</span></div><div class=\"line\">        <span class=\"comment\">// 1. PullRequestHoldService hold了足够的时间后</span></div><div class=\"line\">        <span class=\"comment\">// 2. 有新的信息被发送至队列后</span></div><div class=\"line\">        response = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>那么，消息刷入CommitLog后，怎么样让这个Hold住的PullRequest感知到消息的到来？<br>答案是，DefaultMessageStore.ReputMessageService线程。<br>ReputMessageService开启时就进行了一个近实时的空循环，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> (!<span class=\"keyword\">this</span>.isStopped()) &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        Thread.sleep(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.doReput();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        DefaultMessageStore.log.warn(<span class=\"keyword\">this</span>.getServiceName() + <span class=\"string\">\" service has exception. \"</span>, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>检测CommitLog中的MaxOffset是否在变大，变大了说明有新的消息已经存进了CommitLog，紧接着构建一个dispatchRequest，再让DefaultMessageStore调用doDispatch(dispatchRequest)，<br>该方法并没有开启新的线程，一个做了几件事情，<br>第一，将新的消息刷入consumerQueue，最小2页，作用也非常明显，到时候要获取一个消息，consumerQueue可以用logicOffset定位到CommitLog的PhyicOffset，是一个无法或缺的索引，<br>第二，将新的消息写入index file用于后续更加复杂的查询，<br>第三，计算bitmap。当doDispatch顺利执行完后。</p>\n<p>重点来了，之后触发messageArrivingListener的arriving方法，让pullRequestHoldService调用notifyMessageArriving，<br>开启新的线程再一次让PullMessageProcessor调用processRequest来处理原来的那个pullRequest，但此时由于consumerQueue已经构建好了，所以会正常获取到消息，正常用netty模块进行一个对client的应答。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 用一个接近空轮询</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doReput</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">boolean</span> doNext = <span class=\"keyword\">true</span>; <span class=\"keyword\">this</span>.isCommitLogAvailable() &amp;&amp; doNext; ) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        SelectMappedBufferResult result = DefaultMessageStore.<span class=\"keyword\">this</span>.commitLog.getData(reputFromOffset);</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">this</span>.reputFromOffset = result.getStartOffset();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> readSize = <span class=\"number\">0</span>; readSize &lt; result.getSize() &amp;&amp; doNext; ) &#123;</div><div class=\"line\">            DispatchRequest dispatchRequest =</div><div class=\"line\">                DefaultMessageStore.<span class=\"keyword\">this</span>.commitLog.checkMessageAndReturnSize(result.getByteBuffer(), <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">            <span class=\"keyword\">int</span> size = dispatchRequest.getMsgSize();</div><div class=\"line\">            ...</div><div class=\"line\">            <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// dispatch到构建consumerQueue和index file的调度器中</span></div><div class=\"line\">                DefaultMessageStore.<span class=\"keyword\">this</span>.doDispatch(dispatchRequest);</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">if</span> (BrokerRole.SLAVE != DefaultMessageStore.<span class=\"keyword\">this</span>.getMessageStoreConfig().getBrokerRole()</div><div class=\"line\">                    &amp;&amp; DefaultMessageStore.<span class=\"keyword\">this</span>.brokerConfig.isLongPollingEnable()) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 通知suspend pullRequest的PullRequestHoldService解除对pullRequest的hold</span></div><div class=\"line\">                    DefaultMessageStore.<span class=\"keyword\">this</span>.messageArrivingListener.arriving(dispatchRequest.getTopic(),</div><div class=\"line\">                        dispatchRequest.getQueueId(), dispatchRequest.getConsumeQueueOffset() + <span class=\"number\">1</span>,</div><div class=\"line\">                        dispatchRequest.getTagsCode(), dispatchRequest.getStoreTimestamp(),</div><div class=\"line\">                        dispatchRequest.getBitMap(), dispatchRequest.getPropertiesMap());</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125; </div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>整个过程时序图</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tKfTcgy1fkeelo8oxpj30za0g2adr.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>分成两部分，Client和Broker</p>\n<h3 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client:\"></a>Client:</h3><h3 id=\"Broker\"><a href=\"#Broker\" class=\"headerlink\" title=\"Broker:\"></a>Broker:</h3><p>首先PullMessageProcessor用相应的线程池调用processRequest，去ConsumerQueue中找消息，<br>如果找到了，没有什么好说的，直接用Netty模块将数据写进相应的channel，客户端获取到了数据后进行并行消费；<br>如果没有消息，那么将当前的pullRequest放入PullRequestHoldService的pullRequestTable进行suspend。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> ResponseCode.PULL_NOT_FOUND:</div><div class=\"line\">    <span class=\"keyword\">if</span> (brokerAllowSuspend &amp;&amp; hasSuspendFlag) &#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> pollingTimeMills = suspendTimeoutMillisLong;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.brokerController.getBrokerConfig().isLongPollingEnable()) &#123;</div><div class=\"line\">            pollingTimeMills = <span class=\"keyword\">this</span>.brokerController.getBrokerConfig().getShortPollingTimeMills();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        String topic = requestHeader.getTopic();</div><div class=\"line\">        <span class=\"keyword\">long</span> offset = requestHeader.getQueueOffset();</div><div class=\"line\">        <span class=\"keyword\">int</span> queueId = requestHeader.getQueueId();</div><div class=\"line\">        PullRequest pullRequest = <span class=\"keyword\">new</span> PullRequest(request, channel, pollingTimeMills,</div><div class=\"line\">            <span class=\"keyword\">this</span>.brokerController.getMessageStore().now(), offset, subscriptionData, messageFilter);</div><div class=\"line\">        <span class=\"keyword\">this</span>.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);</div><div class=\"line\">        <span class=\"comment\">// 此处将repsonse设置为null，remote-server将不会给对应的channel发送响应信息。那响应的信息何时发送，有两种情况：</span></div><div class=\"line\">        <span class=\"comment\">// 1. PullRequestHoldService hold了足够的时间后</span></div><div class=\"line\">        <span class=\"comment\">// 2. 有新的信息被发送至队列后</span></div><div class=\"line\">        response = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>那么，消息刷入CommitLog后，怎么样让这个Hold住的PullRequest感知到消息的到来？<br>答案是，DefaultMessageStore.ReputMessageService线程。<br>ReputMessageService开启时就进行了一个近实时的空循环，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> (!<span class=\"keyword\">this</span>.isStopped()) &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        Thread.sleep(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.doReput();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        DefaultMessageStore.log.warn(<span class=\"keyword\">this</span>.getServiceName() + <span class=\"string\">\" service has exception. \"</span>, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>检测CommitLog中的MaxOffset是否在变大，变大了说明有新的消息已经存进了CommitLog，紧接着构建一个dispatchRequest，再让DefaultMessageStore调用doDispatch(dispatchRequest)，<br>该方法并没有开启新的线程，一个做了几件事情，<br>第一，将新的消息刷入consumerQueue，最小2页，作用也非常明显，到时候要获取一个消息，consumerQueue可以用logicOffset定位到CommitLog的PhyicOffset，是一个无法或缺的索引，<br>第二，将新的消息写入index file用于后续更加复杂的查询，<br>第三，计算bitmap。当doDispatch顺利执行完后。</p>\n<p>重点来了，之后触发messageArrivingListener的arriving方法，让pullRequestHoldService调用notifyMessageArriving，<br>开启新的线程再一次让PullMessageProcessor调用processRequest来处理原来的那个pullRequest，但此时由于consumerQueue已经构建好了，所以会正常获取到消息，正常用netty模块进行一个对client的应答。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 用一个接近空轮询</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doReput</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">boolean</span> doNext = <span class=\"keyword\">true</span>; <span class=\"keyword\">this</span>.isCommitLogAvailable() &amp;&amp; doNext; ) &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        SelectMappedBufferResult result = DefaultMessageStore.<span class=\"keyword\">this</span>.commitLog.getData(reputFromOffset);</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">this</span>.reputFromOffset = result.getStartOffset();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> readSize = <span class=\"number\">0</span>; readSize &lt; result.getSize() &amp;&amp; doNext; ) &#123;</div><div class=\"line\">            DispatchRequest dispatchRequest =</div><div class=\"line\">                DefaultMessageStore.<span class=\"keyword\">this</span>.commitLog.checkMessageAndReturnSize(result.getByteBuffer(), <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">            <span class=\"keyword\">int</span> size = dispatchRequest.getMsgSize();</div><div class=\"line\">            ...</div><div class=\"line\">            <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// dispatch到构建consumerQueue和index file的调度器中</span></div><div class=\"line\">                DefaultMessageStore.<span class=\"keyword\">this</span>.doDispatch(dispatchRequest);</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">if</span> (BrokerRole.SLAVE != DefaultMessageStore.<span class=\"keyword\">this</span>.getMessageStoreConfig().getBrokerRole()</div><div class=\"line\">                    &amp;&amp; DefaultMessageStore.<span class=\"keyword\">this</span>.brokerConfig.isLongPollingEnable()) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 通知suspend pullRequest的PullRequestHoldService解除对pullRequest的hold</span></div><div class=\"line\">                    DefaultMessageStore.<span class=\"keyword\">this</span>.messageArrivingListener.arriving(dispatchRequest.getTopic(),</div><div class=\"line\">                        dispatchRequest.getQueueId(), dispatchRequest.getConsumeQueueOffset() + <span class=\"number\">1</span>,</div><div class=\"line\">                        dispatchRequest.getTagsCode(), dispatchRequest.getStoreTimestamp(),</div><div class=\"line\">                        dispatchRequest.getBitMap(), dispatchRequest.getPropertiesMap());</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125; </div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>整个过程时序图</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tKfTcgy1fkeelo8oxpj30za0g2adr.jpg\" alt=\"\"></p>\n"},{"title":"guava中的黑科技","date":"2017-09-19T09:39:05.000Z","_content":"","source":"_posts/black-tech-in-guava.md","raw":"---\ntitle: guava中的黑科技\ndate: 2017-09-19 17:39:05\ntags: Guava\n---\n","slug":"black-tech-in-guava","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hxj001axjq2lmgpvszt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"recipes-in-curator","date":"2017-09-19T09:05:45.000Z","_content":"","source":"_posts/recipes-in-curator.md","raw":"---\ntitle: recipes-in-curator\ndate: 2017-09-19 17:05:45\ntags: Curator\n---\n","slug":"recipes-in-curator","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hxr001dxjq2d5bth68m","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tcc-transaction，分布式事务","date":"2017-09-19T08:29:04.000Z","_content":"","source":"_posts/tcc-transaction.md","raw":"---\ntitle: tcc-transaction，分布式事务\ndate: 2017-09-19 16:29:04\ntags: Transaction\n---\n","slug":"tcc-transaction","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hxt001fxjq2781hrj5l","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tree-cache-single-thread-event-handler-in-curator","date":"2017-09-20T07:32:22.000Z","_content":"\n\nGenericFutureListener.operationComplete(Future) is directly called by an I/O thread. Therefore, performing a time consuming task or a blocking operation in the handler method can cause an unexpected pause during I/O. If you need to perform a blocking operation on I/O completion, try to execute the operation in a different thread using a thread pool.\n\n``` java\nchannel.writeAndFlush(request).addListener(new ChannelFutureListener() {\n    @Override\n    public void operationComplete(ChannelFuture f) throws Exception {\n        if (f.isSuccess()) {\n            responseFuture.setSendRequestOK(true);\n            return;\n        } else {\n            responseFuture.setSendRequestOK(false);\n        }\n\n        responseTable.remove(opaque);\n        responseFuture.setCause(f.cause());\n        responseFuture.putResponse(null);\n        log.warn(\"send a request command to channel <\" + addr + \"> failed.\");\n    }\n});\n```","source":"_posts/tree-cache-single-thread-event-handler-in-curator.md","raw":"---\ntitle: tree-cache-single-thread-event-handler-in-curator\ndate: 2017-09-20 15:32:22\ntags: Curator\n---\n\n\nGenericFutureListener.operationComplete(Future) is directly called by an I/O thread. Therefore, performing a time consuming task or a blocking operation in the handler method can cause an unexpected pause during I/O. If you need to perform a blocking operation on I/O completion, try to execute the operation in a different thread using a thread pool.\n\n``` java\nchannel.writeAndFlush(request).addListener(new ChannelFutureListener() {\n    @Override\n    public void operationComplete(ChannelFuture f) throws Exception {\n        if (f.isSuccess()) {\n            responseFuture.setSendRequestOK(true);\n            return;\n        } else {\n            responseFuture.setSendRequestOK(false);\n        }\n\n        responseTable.remove(opaque);\n        responseFuture.setCause(f.cause());\n        responseFuture.putResponse(null);\n        log.warn(\"send a request command to channel <\" + addr + \"> failed.\");\n    }\n});\n```","slug":"tree-cache-single-thread-event-handler-in-curator","published":1,"updated":"2017-10-16T09:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj95g0hxw001ixjq2qh6ofr0t","content":"<p>GenericFutureListener.operationComplete(Future) is directly called by an I/O thread. Therefore, performing a time consuming task or a blocking operation in the handler method can cause an unexpected pause during I/O. If you need to perform a blocking operation on I/O completion, try to execute the operation in a different thread using a thread pool.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">channel.writeAndFlush(request).addListener(<span class=\"keyword\">new</span> ChannelFutureListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operationComplete</span><span class=\"params\">(ChannelFuture f)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (f.isSuccess()) &#123;</div><div class=\"line\">            responseFuture.setSendRequestOK(<span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            responseFuture.setSendRequestOK(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        responseTable.remove(opaque);</div><div class=\"line\">        responseFuture.setCause(f.cause());</div><div class=\"line\">        responseFuture.putResponse(<span class=\"keyword\">null</span>);</div><div class=\"line\">        log.warn(<span class=\"string\">\"send a request command to channel &lt;\"</span> + addr + <span class=\"string\">\"&gt; failed.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>GenericFutureListener.operationComplete(Future) is directly called by an I/O thread. Therefore, performing a time consuming task or a blocking operation in the handler method can cause an unexpected pause during I/O. If you need to perform a blocking operation on I/O completion, try to execute the operation in a different thread using a thread pool.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">channel.writeAndFlush(request).addListener(<span class=\"keyword\">new</span> ChannelFutureListener() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operationComplete</span><span class=\"params\">(ChannelFuture f)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (f.isSuccess()) &#123;</div><div class=\"line\">            responseFuture.setSendRequestOK(<span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            responseFuture.setSendRequestOK(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        responseTable.remove(opaque);</div><div class=\"line\">        responseFuture.setCause(f.cause());</div><div class=\"line\">        responseFuture.putResponse(<span class=\"keyword\">null</span>);</div><div class=\"line\">        log.warn(<span class=\"string\">\"send a request command to channel &lt;\"</span> + addr + <span class=\"string\">\"&gt; failed.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/Cobar-Reactor-design-pattern/CobarReactor.gif","slug":"CobarReactor.gif","post":"cj95g0hrs000exjq2qhlgbm83","modified":1,"renderable":0},{"_id":"source/_posts/Cobar-Reactor-design-pattern/CobarReactorSign.gif","post":"cj95g0hrs000exjq2qhlgbm83","slug":"CobarReactorSign.gif","modified":1,"renderable":1},{"_id":"source/_posts/RocketMQ-Netty-imp-sync-and-async-invoke/invokeAsync.png","slug":"invokeAsync.png","post":"cj95g0hu60013xjq2fxwvm2zf","modified":1,"renderable":0},{"_id":"source/_posts/RocketMQ-Netty-imp-sync-and-async-invoke/invokeSync.png","slug":"invokeSync.png","post":"cj95g0hu60013xjq2fxwvm2zf","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cj95g0hrc0005xjq290y1cdst","tag_id":"cj95g0hr40003xjq2a2psmqw4","_id":"cj95g0hrk0008xjq2flq2d87v"},{"post_id":"cj95g0hqo0000xjq2ydchcwx2","tag_id":"cj95g0hr40003xjq2a2psmqw4","_id":"cj95g0hrm000axjq2q66quqny"},{"post_id":"cj95g0hrf0006xjq2h7mtqzyx","tag_id":"cj95g0hr40003xjq2a2psmqw4","_id":"cj95g0hrs000dxjq2l5usgaq8"},{"post_id":"cj95g0hrk0009xjq2ep7zw7ar","tag_id":"cj95g0hr40003xjq2a2psmqw4","_id":"cj95g0hrw000fxjq2agjznt9q"},{"post_id":"cj95g0hqz0002xjq28weqryui","tag_id":"cj95g0hr40003xjq2a2psmqw4","_id":"cj95g0hry000hxjq2zu03os7m"},{"post_id":"cj95g0hro000bxjq2icj4mxwi","tag_id":"cj95g0hr40003xjq2a2psmqw4","_id":"cj95g0hs1000kxjq2jl3z3hnt"},{"post_id":"cj95g0hr80004xjq2tgv27jq4","tag_id":"cj95g0hr40003xjq2a2psmqw4","_id":"cj95g0hs4000mxjq2lvydv3i8"},{"post_id":"cj95g0hrw000gxjq2mtoxkq5d","tag_id":"cj95g0hs1000jxjq20diq9zg4","_id":"cj95g0hsa000qxjq2kgf6igvz"},{"post_id":"cj95g0hrz000ixjq2z8va7v8n","tag_id":"cj95g0hs9000pxjq2ak5b422t","_id":"cj95g0hsg000vxjq2ysyoza85"},{"post_id":"cj95g0hs2000lxjq2vauz51kr","tag_id":"cj95g0hse000txjq2zngqb3xa","_id":"cj95g0hst000zxjq2s6qhj917"},{"post_id":"cj95g0hsq000yxjq2uc1u9u9w","tag_id":"cj95g0hsn000xxjq2ei9m9b4p","_id":"cj95g0hu60011xjq2uvmom2ac"},{"post_id":"cj95g0hs5000nxjq27qdluwf4","tag_id":"cj95g0hsn000xxjq2ei9m9b4p","_id":"cj95g0hxd0014xjq2rj4vohoo"},{"post_id":"cj95g0hsu0010xjq2nmpmcm0l","tag_id":"cj95g0hsn000xxjq2ei9m9b4p","_id":"cj95g0hxf0016xjq2kcwxqk2r"},{"post_id":"cj95g0hu60013xjq2fxwvm2zf","tag_id":"cj95g0hsn000xxjq2ei9m9b4p","_id":"cj95g0hxj0019xjq2bi28581e"},{"post_id":"cj95g0hsa000rxjq2uv2mzto3","tag_id":"cj95g0hsn000xxjq2ei9m9b4p","_id":"cj95g0hxo001bxjq24ewqqgt1"},{"post_id":"cj95g0hxd0015xjq2tx6rqbm0","tag_id":"cj95g0hsn000xxjq2ei9m9b4p","_id":"cj95g0hxt001exjq2i5ivs4p7"},{"post_id":"cj95g0hxg0018xjq2o3o6gbte","tag_id":"cj95g0hsn000xxjq2ei9m9b4p","_id":"cj95g0hxv001gxjq2uahdu22u"},{"post_id":"cj95g0hsc000sxjq2fvcdbf04","tag_id":"cj95g0hsn000xxjq2ei9m9b4p","_id":"cj95g0hxz001jxjq2vvcs4l9e"},{"post_id":"cj95g0hxr001dxjq2d5bth68m","tag_id":"cj95g0hs1000jxjq20diq9zg4","_id":"cj95g0hy0001kxjq2onoas295"},{"post_id":"cj95g0hsf000uxjq2q2kjtecp","tag_id":"cj95g0hsn000xxjq2ei9m9b4p","_id":"cj95g0hy1001mxjq2r56p6ron"},{"post_id":"cj95g0hxw001ixjq2qh6ofr0t","tag_id":"cj95g0hs1000jxjq20diq9zg4","_id":"cj95g0hy5001nxjq2inannu0r"},{"post_id":"cj95g0hsj000wxjq2sxylxvrj","tag_id":"cj95g0hsn000xxjq2ei9m9b4p","_id":"cj95g0hy7001pxjq2ab0wno7u"},{"post_id":"cj95g0hxj001axjq2lmgpvszt","tag_id":"cj95g0hy0001lxjq2xtfyw0zs","_id":"cj95g0hy7001qxjq2zyjwpo59"},{"post_id":"cj95g0hxt001fxjq2781hrj5l","tag_id":"cj95g0hy6001oxjq2gqsiokwy","_id":"cj95g0hyc001rxjq2e1lmmebp"}],"Tag":[{"name":"Cobar","_id":"cj95g0hr40003xjq2a2psmqw4"},{"name":"Curator","_id":"cj95g0hs1000jxjq20diq9zg4"},{"name":"Linux","_id":"cj95g0hs9000pxjq2ak5b422t"},{"name":"MySQL","_id":"cj95g0hse000txjq2zngqb3xa"},{"name":"RocketMQ","_id":"cj95g0hsn000xxjq2ei9m9b4p"},{"name":"Guava","_id":"cj95g0hy0001lxjq2xtfyw0zs"},{"name":"Transaction","_id":"cj95g0hy6001oxjq2gqsiokwy"}]}}